#!/bin/bash

# Quiz sur les éléments du tableau périodique (symbole et nom) avec remplissage progressif du tableau

# Historique
# 2018-11-30@11:40:06
#    Création à partir de
#        /Quizz/QuizzElementsChimiques/QuizzElementsChimiques_SimpleDoubleSens.sh
#    qui est la version Bash (inachevée, même à peine commencée) du script
#        /Quizz/QuizzElementsChimiques/QuizzElementsChimiques_SimpleDoubleSens.py
# 2018-12-14@14:21:51
#    Ajout d’informations pour chacun des éléments
#    Déplacement de ce fichier de
#        /Quizz/QuizzElementsChimiques/QuizTableauPeriodiqueElements.sh
#    vers
#        /cmd/qtpe
# 2018-01-07
#     Coloration des éléments selon leur nombre d’isotopes stables et naturels et achèvement du quiz sur les éléments mono-isotopiques.
# 2019-01-08@11:05:17
#     Ajout du quiz sur les éléments mononucléidiques
# 2019-05-13@11:37:58
#     Quelques petites corrections dans l’affichage
# 2019-07-05@17:38:04
#     Ajout de l’option '-l' pour 'light' où le tableau n'est pas affiché, le but est de rendre le quiz plus rapide pour les records de vitesse. Cela a nécessité l’ajout d’une colonne dans le fichier de sauvegarde des scores.
# 2019-10-02@10:51:04
#     Simplification de l’affichage,
#     <Symbole Nom> de l’élément Z = 87 ? :
#     est remplacé par une ligne explicative au début :
#     Vous devez donner les réponses sous la forme <Symbole Nom>, pex: Ch Cochonium, Ub Unobtainium, Ad Adamantium, Ip Impossiblium,...
#     puis pour chaque question :
#      87 ? : 
# 2020-01-05@12:37:59
#     Passage au MacTa: modification du répertoire des scores et celui-ci est déclaré (voir créé si besoin) en début de script, alors que ce morceau de code était répété trois fois avant (dans chaque bloc du case-esac des modes!)
# 2020-04-19@18:30:39
#     Passage à MacTa: correction de bug : le  ~  ne fonctionne pas, il faut utiliser  $HOME
#     Changement : le dossier des fichiers de scores est maintenant dans ~/cmd

# Répertoire ce de script
#ici="$(cd "$(dirname "${BASH_SOURCE[0]}")" > /dev/null 2>&1 && pwd)"
# ^ Ce one-liner fonctionne sauf si des liens symboliques sont impliqués,
#   pour que ça fonctionne même avec des symlink, cf
#   https://stackoverflow.com/a/246128/9249152
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
ici="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

# Adresse par défaut du fichier de sauvegarde du tableau périodique des éléments au format texte
# fichier_tpe="${HOME}/TableauPeriodiqueDesElements_qtpe.txt"
#fichier_tpe="~/Scores/TableauPeriodiqueDesElements_qtpe.txt"
fichier_tpe="$ici/qtpe.TableauPeriodiqueDesElements.txt"

# Répertoire de sauvegarde des fichiers des scores (création s’il n’existe pas)
#repertoire_scores="${HOME}/QuizTableauPeriodiqueElements_Scores"
#repertoire_scores="~/Scores/qtpe"
repertoire_scores="$ici/qtpe.scores"
[[ -d "$repertoire_scores" ]] || mkdir -pv "$repertoire_scores"

# Affichage du mode d’emploi
usage() {
	#cat >&1 <<- EOF
	#cat >&1 <<EOF
	read -r -d '' USAGE <<EOF
NAME
    \033[1mqtpe\033[0m -- Quiz sur le Tableau Périodique des Éléments

SYNOPSIS
    \033[1mqtpe\033[0m [\033[1m-aiplh\033[0m] [\033[1m-c\033[0m | \033[1m-f\033[0m | \033[1m-n\033[0m] [\033[1m-q\033[0m \033[4mtous\033[0m | \033[4munistable\033[0m | \033[4muninaturel\033[0m] [\033[1m-t\033[0m [\033[1m-o\033[0m \033[4mfichier\033[0m]]

DESCRIPTION
    Quiz sur les éléments du tableau périodique.
    Pour chacun des 118 éléments découverts, le numéro atomique (Z) est donné et il faut taper son symbole et son nom séparés par un espace.

    Les options disponibles sont :

    \033[1m-a\033[0m    Approximatif : les majuscules et accents sont facultatif, ainsi, « sn etain » sera considéré comme correct pour « Sn Étain ».

    \033[1m-i\033[0m    Informations : à chaque fois que l’on donne une réponse exacte, des informations complémentaires sont données sur l’élément (isotopes, utilisations,…)

    \033[1m-p\033[0m    Affiche le tableau périodique des éléments à l’écran sans lancer le quiz.

    \033[1m-l\033[0m    Mode « light » : le tableau n’est pas affiché, cela permet de rendre le quiz plus rapide quand l’objectif est de viser le record de rapidité.

    \033[1m-h\033[0m    Affiche cette documentation

    \033[1m-c\033[0m    Caractères colorés : les caractères des éléments (symbole et numéro atomique Z) du tableau périodique sont colorés selon leur catégorie chimique (alcalin, halogène, noble,…) Cette option est excluante avec -f, si les deux sont données, alors -c l’emporte.
    \033[1m-f\033[0m    Fonds colorés : le fond des cases du tableau périodique est coloré selon la catégorie chimique (alcalin, halogène, noble,…) de l’élément. Cette option est excluante avec -c, si les deux sont données, alors -c l’emporte.
    \033[1m-n\033[0m    Pas de coloration (cette option l’emporte sur -c et -f).

    \033[1m-q\033[0m    Choix du quiz ::
          \033[4mtous\033[0m       : par défaut, il faut donner le symbole et le nom des 118 éléments découverts
          \033[4munistable\033[0m  : il faut donner le symbole et le nom des 26 éléments monoisotopiques, cad ceux ayant un seul isotope stable
          \033[4muninaturel\033[0m : il faut donner le symbole et le nom des 22 éléments mononucléidiques, cad ceux ayant un seul isotope naturel

    \033[1m-t\033[0m    Écriture du tableau périodique des éléments au format texte (cad tel qu’il est affiché dans le terminal par ce script) dans un fichier, par défaut :
          \033[4m$fichier_tpe\033[0m
          Cette option annule le quiz (et donc toutes les autres options).
    \033[1m-o\033[0m \033[4mfichier\033[0m    Adresse du fichier (cette option active automatiquement \033[1m-t\033[0m)

EXAMPLES
    Par défaut, les deux lignes suivantes sont équivalentes :
    \033[32m$\033[0m \033[31mqtpe\033[0m
    \033[32m$\033[0m \033[31mqtpe -c -q\033[0m \033[34mtous\033[0m

    Quiz sans les majuscules et accents (non-nécessaire en BÉPO, nécessaire en AZERTY, QWERTY,…)
    \033[32m$\033[0m \033[31mqtpe -a\033[0m

    Afficher le tableau périodique des éléments avec coloration des caractères, des fonds et sans coloration :
    \033[32m$\033[0m \033[31mqtpe -p\033[0m
    \033[32m$\033[0m \033[31mqtpe -pf\033[0m
    \033[32m$\033[0m \033[31mqtpe -pn\033[0m

    Sauvegarde dans un fichier du tableau périodique des éléments
    \033[32m$\033[0m \033[31mqtpe -t -o\033[0m \033[34m~/mendeleiev.txt\033[0m
EOF
echo -e "$USAGE"
}

## Aquisition des options
#OPTS=$(getopt -o a c f t o -l help)
#if [[ $? != 0 ]] ; then
#    echo "\$? : $?"
#    exit 1
#fi
#
## Traitement des options
#while : ; do
#    case "$1" in
#        -a) echo "Mode approximatif"
#            shift 1;;
#        -c) echo "Coloration des caractères"
#            shift 1;;
#        -f) echo "Coloration du fond"
#            shift 1;;
#        -t) echo "Sauvegarde du tableau dans un fichier"
#            shift 1;;
#        -o) echo "Fichier de sauvegarde du tableau : $2"
#            shift 2;;
#        --help) usage
#            exit 0;;
#    esac
#done

# Par défaut, le séparateur des décimal peut être la virgule (c’est le cad de mon Mac), cela mène à plein de problème, pex :
#     printf "%.3f" ${var/./,}
# car '%.3f' ne fonctionne pas si on lui donne un flottant avec un point comme séparateur décimal !
# Cf post Stack Overflow "How do i change the decimal separator in the printf command in bash?"
# Les variables de localisation peuvent être affichées avec 'locale' :
#     $ locale
#     LANG="fr_FR.UTF-8"
#     LC_COLLATE="fr_FR.UTF-8"
#     LC_CTYPE="fr_FR.UTF-8"
#     LC_MESSAGES="fr_FR.UTF-8"
#     LC_MONETARY="fr_FR.UTF-8"
#     LC_NUMERIC="fr_FR.UTF-8"
#     LC_TIME="fr_FR.UTF-8"
#     LC_ALL=
# la liste des langues.encodages disponibles peut être affiché avec '$ locale -a'.
# Pour s’assurer que le séparateur décimal est bien le point :
export LC_NUMERIC="en_GB.UTF-8"

# Configuration par défaut
mode='exact'
coloration='caracteres'
option_c=false
sauvegarde_tpe=false
option_n=false
option_p=false
option_l=false
option_i=false
quiz='tous'

# Traitement des options
while getopts ":aiplcfnq:to:h" opt ; do
	#echo "Traitement de $opt"
	case "$opt" in
		a) echo "Mode approximatif : « sn etain » est accepté pour « Sn Étain »"
			mode='approximatif'
			;;
		c) #echo "Coloration des caractères"
			if [[ $option_n == false ]] ; then
				option_c=true
				coloration='caracteres'
			fi
			;;
		f) #echo "Coloration du fond"
			if [[ $option_n == false && $option_c == false ]] ; then coloration='fond'; fi
			;;
		n) #echo "Pas de coloration"
			option_n=true
			coloration='none'
			;;
		q) # Sélection du quiz (si l’argument n’est pas l’un des trois quiz possibles, alors le quiz sera celui par défaut sur les 118 éléments)
			case "$OPTARG" in
				tous) quiz="$OPTARG";;
				unistable) quiz="$OPTARG";;
				uninaturel) quiz="$OPTARG";;
				*) quiz='tous';;
			esac
			;;
		p) # Affichage du TPE sans lancer le quiz
			option_p=true
			;;
		l) # Le tableau périodique des éléments n’est pas affiché afin de rendre le quiz plus rapide
			option_l=true
			;;
		t) #echo "Sauvegarde du tableau dans un fichier"
			sauvegarde_tpe=true
			;;
		o) #echo "Fichier de sauvegarde du tableau : $OPTARG"
			sauvegarde_tpe=true
			# Vérification que l’adresse donnée ne correspond pas à un fichier déjà existant (et peut être important, pex : $ qtpe -t -o /bin/bash)
			if [[ -e "$OPTARG" ]] ; then
				echo -e "\033[31m/!\\ \033[0m: Le fichier \033[34m$OPTARG\033[0m existe déjà  ==> Le tableau périodique des éléments sera sauvegardé sous son adresse par défaut :\n\t$fichier_tpe"
			else
				fichier_tpe="$OPTARG"
			fi
			;;
		i) # Affichage d’informations complémentaires sur l’éléments joué
			option_i=true
			;;
		h) usage
			exit 0;;
		:) echo -e "\033[31m/!\\ \033[0m: \033[1m-$OPTARG\033[0m requiert un argument  ==>  arrêt de l’exécution"
			exit 1;;
		\?) echo -e "\033[31m/!\\ \033[0m: \033[1m-$OPTARG\033[0m est invalide"
			;;
	esac
done

# Provisoire : traitement du type de quiz
case "$quiz" in
	tous) echo "Quiz sur tous les éléments du tableau périodique" ;;
	#unistable) echo "Quiz sur les éléments monoisotopiques : pas encore implémenté  ==>  arrêt du quiz" ; exit 1 ;;
	unistable) echo "Quiz sur les éléments monoisotopiques" ;;
	uninaturel) echo "Quiz sur les éléments mononucléidiques" ;;
	*) echo "/!\\ Problème : quiz = $quiz  ==>  arrêt du quiz" ; exit 1 ;;
esac

# Symboles de tous les éléments
Xx=(H He Li Be B C N O F Ne Na Mg Al Si P S Cl Ar K Ca Sc Ti V Cr Mn Fe Co Ni Cu Zn Ga Ge As Se Br Kr Rb Sr Y Zr Nb Mo Tc Ru Rh Pd Ag Cd In Sn Sb Te I Xe Cs Ba La Ce Pr Nd Pm Sm Eu Gd Tb Dy Ho Er Tm Yb Lu Hf Ta W Re Os Ir Pt Au Hg Tl Pb Bi Po At Rn Fr Ra Ac Th Pa U Np Pu Am Cm Bk Cf Es Fm Md No Lr Rf Db Sg Bh Hs Mt Ds Rg Cn Nh Fl Mc Lv Ts Og)

# Noms français
Fr=(Hydrogène Hélium Lithium Béryllium Bore Carbone Azote Oxygène Fluor Néon Sodium Magnésium Aluminium Silicium Phosphore Soufre Chlore Argon Potassium Calcium Scandium Titane Vanadium Chrome Manganèse Fer Cobalt Nickel Cuivre Zinc Gallium Germanium Arsenic Sélénium Brome Krypton Rubidium Strontium Yttrium Zirconium Niobium Molybdène Technétium Ruthénium Rhodium Palladium Argent Cadmium Indium Étain Antimoine Tellure Iode Xénon Césium Baryum Lanthane Cérium Praséodyme Néodyme Prométhium Samarium Europium Gadolinium Terbium Dysprosium Holmium Erbium Thulium Ytterbium Lutécium Hafnium Tantale Tungstène Rhénium Osmium Iridium Platine Or Mercure Thallium Plomb Bismuth Polonium Astate Radon Francium Radium Actinium Thorium Protactinium Uranium Neptunium Plutonium Américium Curium Berkélium Californium Einsteinium Fermium Mendélévium Nobélium Lawrencium Rutherfordium Dubnium Seaborgium Bohrium Hassium Meitnerium Darmstadtium Roentgenium Copernicium Nihonium Flérovium Moscovium Livermorium Tennesse Oganesson)
# Plus long nom d’élément en Français
#maxfr=0
#for n in ${Fr[@]}; do
#    echo "$n ${#n}"
#    if (( ${#n} > $maxfr )); then
#        maxfr=${#n}
#        echo -e "\tmaxfr = $maxfr"
#    fi
#done
maxfr=13

# Noms anglais
En=(Hydrogen Helium Lithium Beryllium Boron Carbon Nitrogen Oxygen Fluorine Neon Sodium Magnesium Aluminium Silicon Phosphorus Sulfur Chlorine Argon Potassium Calcium Scandium Titanium Vanadium Chromium Manganese Iron Cobalt Nickel Copper Zinc Gallium Germanium Arsenic Selenium Bromine Krypton Rubidium Strontium Yttrium Zirconium Niobium Molybdenum Technetium Ruthenium Rhodium Palladium Silver Cadmium Indium Tin Antimony Tellurium Iodine Xenon Cesium Barium Lanthanum Cerium Praseodymium Neodymium Promethium Samarium Europium Gadolinium Terbium Dysprosium Holmium Erbium Thulium Ytterbium Lutetium Hafnium Tantalum Tungten Rhenium Osmium Iridium Platinum Gold Mercury Thallium Lead Bismuth Polonium Astatine Radon Francium Radium Actinium Thorium Protactinium Uranium Neptunium Plutonium Americium Curium Berkelium Californium Einsteinium Fermium Mendelevium Nobelium Lawrencium Rutherfordium Dubnium Seaborgium Bohrium Hassium Meitnerium Darmstadtium Roentgenium Copernicium Nihonium Flerovium Moscovium Livermorium Tennessine Oganesson)
# Plus long nom d’élément en Anglais
#maxen=0
#for n in ${En[@]}; do
#    echo "$n ${#n}"
#    if (( ${#n} > $maxen )); then
#        maxen=${#n}
#        echo -e "\tmaxen = $maxen"
#    fi
#done
maxen=13

# Noms allemands
De=(Wasserstoff Helium Lithium Beryllium Bor Kohlenstoff Stickstoff Sauerstoff Fluor Neon Natrium Magnesium Aluminium Silicium Phosphor Schwefel Chlor Argon Kalium Calcium Scandium Titan Vanadium Chrom Mangan Eisen Cobalt Nickel Kupfer Zink Gallium Germanium Arsen Selen Brom Krypton Rubidium Strontium Yttrium Zirconium Niob Molybdän Technetium Ruthenium Rhodium Palladium Silber Cadmium Indium Zinn Antimon Tellur Iod Xenon Cäsium Barium Lanthan Cer Praseodym Neodym Promethium Samarium Europium Gadolinium Terbium Dysprosium Holmium Erbium Thulium Ytterbium Lutetium Hafnium Tantal Wolfram Rhenium Osmiumu Iridium Platin Gold Quecksilber Thallium Blei Bismut Polonium Astat Radon Francium Radium Actinium Thorium Protaktinium Uran Neptunium Plutonium Americium Curium Berkelium Californium Einsteinium Fermium Mendelevium Nobelium Lawrencium Rutherfordium Dubnium Seaborgium Bohrium Hassium Meitnerium Darmstadtium Röentgenium Copernicium Nihonium Flerovium Moscovium Livermorium Tennessine Oganesson)
# Plus long nom d’élément en Allemand
#maxde=0
#for n in ${En[@]}; do
#    echo "$n ${#n}"
#    if (( ${#n} > $maxde )); then
#        maxde=${#n}
#        echo -e "\tmaxde = $maxde"
#    fi
#done
maxde=13

# Nomms italiens
It=(Idrogeno Elio Litio Berillio Boro Carbonio Azoto Ossigeno Fluoro Neon Sodio Magnesio Alluminio Silicio Fosforo Zolfo Cloro Argon Potassio Calcio Scandio Titanio Vanadio Cromo Manganese Ferro Cobalto Nichel Rame Zinco Gallio Germanio Arsenico Selenio Bromo Cripton Rubidio Stronzio Ittrio Zirconio Niobio Molibdeno Tecnezio Rutenio Rodio Palladio Argento Cadmio Indio Stannio Antimonio Tellurio Iodio Xenon Cesio Bario Lantanio Cerio Praseodimio Neodimio Promezio Samario Europio Gadolinio Terbio Disprosio Olmio Erbio Tullio Itterbio Lutezio Afnio Tantalio Tungsteno Renio Osmio Iridio Platino Oro Mercurio Tallio Plombo Bismuto Polonio Astato Radon Francio Radio Attinio Torio Proattinio Uranio Nettunio Plutonio Americio Curio Berkelio Californio Einsteinio Fermio Mendelevio Nobelio Lurenzio Rutherfordio Dubnio Seaborgio Bohrio Hassio Meitnerio Darmstadtio Roentgenio Copernicio Nihonio Flerovio Moscovio Livermorio Tennesso Oganesson)
# Plus long nom d’élément en Allemand
#maxit=0
#for n in ${En[@]}; do
#    echo "$n ${#n}"
#    if (( ${#n} > $maxit )); then
#        maxit=${#n}
#        echo -e "\tmaxit = $maxit"
#    fi
#done
maxit=13

# Affichage du tableau
#for ((i=0; i<118; i++)); do
#    #printf "%3d %13s %13s %13s %13s\n" $(($i+1)) ${Fr[$i]} ${En[$i]} ${De[$i]} ${It[$i]}
#    printf "%3d" $(($i+1))
#    # Lettres accentuées en Français
#    caraccentfr=${Fr[$i]//[^éèÉ]}
#    ((lgfr = 14 + ${#caraccentfr}))
#    chfr="%${lgfr}s"
#    # Lettres accentuées en Allemand
#    caraccentde=${De[$i]//[^äö]}
#    ((lgde = 14 + ${#caraccentde}))
#    chde="%${lgde}s"
#    # Affichage
#    printf $chfr ${Fr[$i]}
#    printf "%14s" ${En[$i]}
#    printf $chde ${De[$i]}
#    printf "%14s" ${It[$i]}
#    printf "\n"
#done

# %% ==========================================================================
#    Éléments monoisotopiques : un seul isotope stable, 26 éléments sur 118
#    https://en.wikipedia.org/wiki/Monoisotopic_element

#    Beryllium-9
#    Fluorine-19
#    Sodium-23
#    Aluminium-27
#    Phosphorus-31
#    Scandium-45
#    Vanadium-51* naturally occurs with 0.25% of radioactive vanadium-50
#    Manganese-55
#    Cobalt-59
#    Arsenic-75
#    Rubidium-85* naturally occurs with 27.835% of radioactive rubidium-87
#    Yttrium-89
#    Niobium-93
#    Rhodium-103
#    Indium-113* naturally occurs with majority (95.7%) radioactive isotope indium-115
#    Iodine-127
#    Caesium-133
#    Lanthanum-139* naturally occurs with 0.09% radioactive lanthanum-138
#    Praseodymium-141
#    Europium-153* naturally occurs with 47.8% radioactive europium-151
#    Terbium-159
#    Holmium-165
#    Thulium-169
#    Lutetium-175* naturally occurs with 2.59% radioactive lutetium-176
#    Rhenium-185* naturally occurs with majority (62.6%) radioactive isotope rhenium-187
#    Gold-197

# Numéros atomiques des éléments mononucléidiques
Z_unistables=(4 9 11 13 15 21 23 25 27 33 37 39 41 45 49 53 55 57 59 63 65 67 69 71 75 79)

# Symboles et noms des éléments unistables
for ((i=0 ; i<26 ; i++)) ; do
	Xx_unistables[$i]=${Xx[$((${Z_unistables[$i]} - 1))]}
	Fr_unistables[$i]=${Fr[$((${Z_unistables[$i]} - 1))]}
done
#echo "${Xx_unistables[@]}"
#echo "${Fr_unistables[@]}"
#exit 0

# %% ==========================================================================
#    Éléments mononucléidiques : un seul isotope naturellement présent, 22 éléments sur 118
#    https://en.wikipedia.org/wiki/Mononuclidic_element

#    | Element      | Nuclide | Z (p) | N (n) | Isotopic mass (u) | Notes         |
#    |:-------------|:--------|:------|:------|:------------------|:--------------|
#    | beryllium    | Be-9    | 4     | 5     | 9.012 182(3)      |               |
#    | fluorine     | F-19    | 9     | 10    | 18.998 403 2(5)   |               |
#    | sodium       | Na-23   | 11    | 12    | 22.989 770(2)     |               |
#    | aluminium    | Al-27   | 13    | 14    | 26.981 538(2)     |               |
#    | phosphorus   | P-31    | 15    | 16    | 30.973 761(2)     |               |
#    | scandium     | Sc-45   | 21    | 24    | 44.955 910(8)     |               |
#    | manganese    | Mn-55   | 25    | 30    | 54.938 049(9)     |               |
#    | cobalt       | Co-59   | 27    | 32    | 58.933 200(9)     |               |
#    | arsenic      | As-75   | 33    | 42    | 74.921 60(2)      |               |
#    | yttrium      | Y-89    | 39    | 50    | 88.905 85(2)      |               |
#    | niobium      | Nb-93   | 41    | 52    | 92.906 38(2)      |               |
#    | rhodium      | Rh-103  | 45    | 58    | 102.905 50(2)     |               |
#    | iodine       | I-127   | 53    | 74    | 126.904 47(3)     |               |
#    | caesium      | Cs-133  | 55    | 78    | 132.905 45(2)     |               |
#    | praseodymium | Pr-141  | 59    | 82    | 140.907 65(2)     |               |
#    | terbium      | Tb-159  | 65    | 94    | 158.925 34(2)     |               |
#    | holmium      | Ho-165  | 67    | 98    | 164.930 32(2)     |               |
#    | thulium      | Tm-169  | 69    | 100   | 168.934 21(2)     |               |
#    | gold         | Au-197  | 79    | 118   | 196.966 55(2)     |               |
#    | bismuth      | Bi-209  | 83    | 126   | 208.980 38(2)     | (radioactive) |
#    | thorium      | Th-232  | 90    | 142   | 232.038 1(1)      | (radioactive) |
#    | protactinium | Pa-231  | 91    | 140   | 231.035 88(2)     | (radioactive) |

# Numéros atomiques (Z) des 22 éléments mononucléidiques
Z_uninaturels=(4 9 11 13 15 21 25 27 33 39 41 45 53 55 59 65 67 69 79 83 90 91)

# Symboles et noms des éléments unistables
for ((i=0 ; i<22 ; i++)) ; do
	Xx_uninaturels[$i]=${Xx[$((${Z_uninaturels[$i]} - 1))]}
	Fr_uninaturels[$i]=${Fr[$((${Z_uninaturels[$i]} - 1))]}
done
#echo "${Xx_unistables[@]}"
#echo "${Fr_unistables[@]}"
#exit 0

# %% ==========================================================================
#    
afficheTPE() {
	# Affiche le tableau périodique des élements
	# =============================================================================
	tpe=''
	ligne_top=''
	ligne_Xx=''
	ligne_Z=''
	# -----------------------------------------------------------------------------
	# Ligne 1
	# 1 H
	i=0
	ligne_top="${ligne_top}+-----"
	ligne_Xx="${ligne_Xx}|  $(printf '%2s' ${Xx[$i]}) "
	ligne_Z="${ligne_Z}| $(printf '%3d' $(($i+1))) "
	ligne_top="${ligne_top}+"
	ligne_Xx="${ligne_Xx}|"
	ligne_Z="${ligne_Z}|"
	# Néant
	ligne_top="${ligne_top}$(printf %$((6*30-1))s)"
	ligne_Xx="${ligne_Xx}$(printf %$((6*30-1))s)"
	ligne_Z="${ligne_Z}$(printf %$((6*30-1))s)"
	# 2 He
	i=1
	ligne_top="${ligne_top}+-----"
	ligne_Xx="${ligne_Xx}|  $(printf '%2s' ${Xx[$i]}) "
	ligne_Z="${ligne_Z}| $(printf '%3d' $(($i+1))) "
	ligne_top="${ligne_top}+\n"
	ligne_Xx="${ligne_Xx}|\n"
	ligne_Z="${ligne_Z}|\n"
	# Ligne 1
	tpe="${tpe}${ligne_top}${ligne_Xx}${ligne_Z}"
	ligne_top=''
	ligne_Xx=''
	ligne_Z=''
	# -----------------------------------------------------------------------------
	# Ligne 2
	# 3 Li - 4 Be
	for ((i=2; i<=3; i++)); do
		ligne_top="${ligne_top}+-----"
		ligne_Xx="${ligne_Xx}|  $(printf '%2s' ${Xx[$i]}) "
		ligne_Z="${ligne_Z}| $(printf '%3d' $(($i+1))) "
	done
	ligne_top="${ligne_top}+"
	ligne_Xx="${ligne_Xx}|"
	ligne_Z="${ligne_Z}|"
	# Néant
	ligne_top="${ligne_top}$(printf %$((6*24-1))s)"
	ligne_Xx="${ligne_Xx}$(printf %$((6*24-1))s)"
	ligne_Z="${ligne_Z}$(printf %$((6*24-1))s)"
	# 5 B - 10 Ne
	for ((i=4; i<=9; i++)); do
		ligne_top="${ligne_top}+-----"
		ligne_Xx="${ligne_Xx}|  $(printf '%2s' ${Xx[$i]}) "
		ligne_Z="${ligne_Z}| $(printf '%3d' $(($i+1))) "
	done
	ligne_top="${ligne_top}+\n"
	ligne_Xx="${ligne_Xx}|\n"
	ligne_Z="${ligne_Z}|\n"
	# Ligne 2
	tpe="${tpe}${ligne_top}${ligne_Xx}${ligne_Z}"
	ligne_top=''
	ligne_Xx=''
	ligne_Z=''
	# -----------------------------------------------------------------------------
	# Ligne 3
	# 11 Na - 18 Ar
	for ((i=10; i<=11; i++)); do
		ligne_top="${ligne_top}+-----"
		ligne_Xx="${ligne_Xx}|  $(printf '%2s' ${Xx[$i]}) "
		ligne_Z="${ligne_Z}| $(printf '%3d' $(($i+1))) "
	done
	ligne_top="${ligne_top}+"
	ligne_Xx="${ligne_Xx}|"
	ligne_Z="${ligne_Z}|"
	# Néant
	ligne_top="${ligne_top}$(printf %$((6*24-1))s)"
	ligne_Xx="${ligne_Xx}$(printf %$((6*24-1))s)"
	ligne_Z="${ligne_Z}$(printf %$((6*24-1))s)"
	# 5 B - 10 Ne
	for ((i=12; i<=17; i++)); do
		ligne_top="${ligne_top}+-----"
		ligne_Xx="${ligne_Xx}|  $(printf '%2s' ${Xx[$i]}) "
		ligne_Z="${ligne_Z}| $(printf '%3d' $(($i+1))) "
	done
	ligne_top="${ligne_top}+\n"
	ligne_Xx="${ligne_Xx}|\n"
	ligne_Z="${ligne_Z}|\n"
	# Ligne 3
	tpe="${tpe}${ligne_top}${ligne_Xx}${ligne_Z}"
	ligne_top=''
	ligne_Xx=''
	ligne_Z=''
	# -----------------------------------------------------------------------------
	# Ligne 4
	# 19 K - 20 Ca
	for ((i=18; i<=19; i++)); do
		ligne_top="${ligne_top}+-----"
		ligne_Xx="${ligne_Xx}|  $(printf '%2s' ${Xx[$i]}) "
		ligne_Z="${ligne_Z}| $(printf '%3d' $(($i+1))) "
	done
	ligne_top="${ligne_top}+"
	ligne_Xx="${ligne_Xx}|"
	ligne_Z="${ligne_Z}|"
	# Néant
	ligne_top="${ligne_top}$(printf %$((6*14-1))s)"
	ligne_Xx="${ligne_Xx}$(printf %$((6*14-1))s)"
	ligne_Z="${ligne_Z}$(printf %$((6*14-1))s)"
	# 21 Sc - 36 Kr
	for ((i=20; i<=35; i++)); do
		ligne_top="${ligne_top}+-----"
		ligne_Xx="${ligne_Xx}|  $(printf '%2s' ${Xx[$i]}) "
		ligne_Z="${ligne_Z}| $(printf '%3d' $(($i+1))) "
	done
	ligne_top="${ligne_top}+\n"
	ligne_Xx="${ligne_Xx}|\n"
	ligne_Z="${ligne_Z}|\n"
	# Ligne 4
	tpe="${tpe}${ligne_top}${ligne_Xx}${ligne_Z}"
	ligne_top=''
	ligne_Xx=''
	ligne_Z=''
	# -----------------------------------------------------------------------------
	# Ligne 5
	# 37 Rb - 38 Sr
	for ((i=36; i<=37; i++)); do
		ligne_top="${ligne_top}+-----"
		ligne_Xx="${ligne_Xx}|  $(printf '%2s' ${Xx[$i]}) "
		ligne_Z="${ligne_Z}| $(printf '%3d' $(($i+1))) "
	done
	ligne_top="${ligne_top}+"
	ligne_Xx="${ligne_Xx}|"
	ligne_Z="${ligne_Z}|"
	# Néant
	ligne_top="${ligne_top}$(printf %$((6*14-1))s)"
	ligne_Xx="${ligne_Xx}$(printf %$((6*14-1))s)"
	ligne_Z="${ligne_Z}$(printf %$((6*14-1))s)"
	# 39 Y - 54 Xe
	for ((i=38; i<=53; i++)); do
		ligne_top="${ligne_top}+-----"
		ligne_Xx="${ligne_Xx}|  $(printf '%2s' ${Xx[$i]}) "
		ligne_Z="${ligne_Z}| $(printf '%3d' $(($i+1))) "
	done
	ligne_top="${ligne_top}+\n"
	ligne_Xx="${ligne_Xx}|\n"
	ligne_Z="${ligne_Z}|\n"
	# Ligne 5
	tpe="${tpe}${ligne_top}${ligne_Xx}${ligne_Z}"
	ligne_top=''
	ligne_Xx=''
	ligne_Z=''
	# -----------------------------------------------------------------------------
	# Ligne 6
	# 55 Cs - 86 Rn
	for ((i=54; i<=85; i++)); do
		ligne_top="${ligne_top}+-----"
		ligne_Xx="${ligne_Xx}|  $(printf '%2s' ${Xx[$i]}) "
		ligne_Z="${ligne_Z}| $(printf '%3d' $(($i+1))) "
	done
	ligne_top="${ligne_top}+\n"
	ligne_Xx="${ligne_Xx}|\n"
	ligne_Z="${ligne_Z}|\n"
	# Ligne 6
	tpe="${tpe}${ligne_top}${ligne_Xx}${ligne_Z}"
	ligne_top=''
	ligne_Xx=''
	ligne_Z=''
	# -----------------------------------------------------------------------------
	# Ligne 7
	# 87 Fr - 118 Og
	for ((i=86; i<=117; i++)); do
		ligne_top="${ligne_top}+-----"
		ligne_Xx="${ligne_Xx}|  $(printf '%2s' ${Xx[$i]}) "
		ligne_Z="${ligne_Z}| $(printf '%3d' $(($i+1))) "
	done
	ligne_top="${ligne_top}+\n"
	ligne_Xx="${ligne_Xx}|\n"
	ligne_Z="${ligne_Z}|\n"
	# Ligne 7
	tpe="${tpe}${ligne_top}${ligne_Xx}${ligne_Z}"
	# Bas du tableau
	tpe="${tpe}+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n"
	# =============================================================================
	echo -e "$tpe"
}
#afficheTPE
#exit 0

# Gestion de la coloration
if [[ $coloration == 'caracteres' ]] ; then
	#echo 'Coloration des caractères'
	# Couleurs selon l’espèce chimique
	alcalins='1;31;40'
	terreux='1;33;40'
	transitions='1;35;40'
	pauvres='1;90;40'
	metalloides='1;37;40'
	nonmetaux='1;92;40'
	halogenes='1;93;40'
	nobles='1;96;40'
	lanthanides='1;94;40'
	actinides='1;95;40'
	inconnues='1;97;40'
	# Basculement vers un fond noir avec texte en blanc afin que la coloration fonctionne quelque soit le thème du terminal
	original='0;49;39'
	defaut='0;97;40'
elif [[ $coloration == 'fond' ]] ; then
	#echo 'Coloration des fonds'
	alcalins='1;30;41'
	terreux='1;30;43'
	transitions='1;30;45'
	pauvres='1;30;100'
	metalloides='1;30;47'
	nonmetaux='1;30;102'
	halogenes='1;30;103'
	nobles='1;30;106'
	lanthanides='1;30;105'
	actinides='1;30;105'
	inconnues='1;30;107'
elif [[ $coloration == 'none' ]] ; then
	#echo 'Pas de coloration'
	alcalins=0
	terreux=0
	transitions=0
	pauvres=0
	metalloides=0
	nonmetaux=0
	halogenes=0
	nobles=0
	lanthanides=0
	actinides=0
	inconnues=0
fi

# Tableau des couleurs selon le nombre d’isotopes stables et naturels pour 'afficheTPEpartiel_CouleursExterne'
# Nombre S_Z d’isotopes stables : couleur de fond
#     S_Z = 0 : noir
#     S_Z = 1 : gris
#     S_Z > 1 : blanc
# Nombre N_Z d’isotopes naturels : couleur des caractères
#     N_Z = 0 : rouge
#     N_Z = 1 : bleu
#     N_Z > 1 : vert
style[$((1 - 1))]='1;107;92'
style[$((2 - 1))]='1;107;92'
style[$((3 - 1))]='1;107;92'
style[$((4 - 1))]='1;100;33'
style[$((5 - 1))]='1;107;92'
style[$((6 - 1))]='1;107;92'
style[$((7 - 1))]='1;107;92'
style[$((8 - 1))]='1;107;92'
style[$((9 - 1))]='1;100;33'
style[$((10 - 1))]='1;107;92'
style[$((11 - 1))]='1;100;33'
style[$((12 - 1))]='1;107;92'
style[$((13 - 1))]='1;100;33'
style[$((14 - 1))]='1;107;92'
style[$((15 - 1))]='1;100;33'
style[$((16 - 1))]='1;107;92'
style[$((17 - 1))]='1;107;92'
style[$((18 - 1))]='1;107;92'
style[$((19 - 1))]='1;107;92'
style[$((20 - 1))]='1;107;92'
style[$((21 - 1))]='1;100;33'
style[$((22 - 1))]='1;107;92'
style[$((23 - 1))]='1;100;92'
style[$((24 - 1))]='1;107;92'
style[$((25 - 1))]='1;100;33'
style[$((26 - 1))]='1;107;92'
style[$((27 - 1))]='1;100;33'
style[$((28 - 1))]='1;107;92'
style[$((29 - 1))]='1;107;92'
style[$((30 - 1))]='1;107;92'
style[$((31 - 1))]='1;107;92'
style[$((32 - 1))]='1;107;32'
style[$((33 - 1))]='1;100;33'
style[$((34 - 1))]='1;107;92'
style[$((35 - 1))]='1;107;92'
style[$((36 - 1))]='1;107;92'
style[$((37 - 1))]='1;100;92'
style[$((38 - 1))]='1;107;92'
style[$((39 - 1))]='1;100;33'
style[$((40 - 1))]='1;107;92'
style[$((41 - 1))]='1;100;33'
style[$((42 - 1))]='1;107;92'
style[$((43 - 1))]='1;40;91'
style[$((44 - 1))]='1;107;92'
style[$((45 - 1))]='1;100;33'
style[$((46 - 1))]='1;107;92'
style[$((47 - 1))]='1;107;92'
style[$((48 - 1))]='1;107;92'
style[$((49 - 1))]='1;100;92'
style[$((50 - 1))]='1;107;92'
style[$((51 - 1))]='1;107;92'
style[$((52 - 1))]='1;107;92'
style[$((53 - 1))]='1;100;33'
style[$((54 - 1))]='1;107;92'
style[$((55 - 1))]='1;100;33'
style[$((56 - 1))]='1;107;92'
style[$((57 - 1))]='1;100;92'
style[$((58 - 1))]='1;107;92'
style[$((59 - 1))]='1;100;33'
style[$((60 - 1))]='1;107;92'
style[$((61 - 1))]='1;40;91'
style[$((62 - 1))]='1;107;92'
style[$((63 - 1))]='1;100;92'
style[$((64 - 1))]='1;107;92'
style[$((65 - 1))]='1;100;33'
style[$((66 - 1))]='1;107;92'
style[$((67 - 1))]='1;100;33'
style[$((68 - 1))]='1;107;92'
style[$((69 - 1))]='1;100;33'
style[$((70 - 1))]='1;107;92'
style[$((71 - 1))]='1;100;92'
style[$((72 - 1))]='1;107;92'
style[$((73 - 1))]='1;107;92'
style[$((74 - 1))]='1;107;92'
style[$((75 - 1))]='1;100;92'
style[$((76 - 1))]='1;107;92'
style[$((77 - 1))]='1;107;92'
style[$((78 - 1))]='1;107;92'
style[$((79 - 1))]='1;100;33'
style[$((80 - 1))]='1;107;92'
style[$((81 - 1))]='1;107;92'
style[$((82 - 1))]='1;107;92'
style[$((83 - 1))]='1;40;33'
style[$((84 - 1))]='1;40;91'
style[$((85 - 1))]='1;40;91'
style[$((86 - 1))]='1;40;91'
style[$((87 - 1))]='1;40;91'
style[$((88 - 1))]='1;40;91'
style[$((89 - 1))]='1;40;91'
style[$((90 - 1))]='1;40;33'
style[$((91 - 1))]='1;40;33'
style[$((92 - 1))]='1;40;92'
style[$((93 - 1))]='1;40;91'
style[$((94 - 1))]='1;40;91'
style[$((95 - 1))]='1;40;91'
style[$((96 - 1))]='1;40;91'
style[$((97 - 1))]='1;40;91'
style[$((98 - 1))]='1;40;91'
style[$((99 - 1))]='1;40;91'
style[$((100 - 1))]='1;40;91'
style[$((101 - 1))]='1;40;91'
style[$((102 - 1))]='1;40;91'
style[$((103 - 1))]='1;40;91'
style[$((104 - 1))]='1;40;91'
style[$((105 - 1))]='1;40;91'
style[$((106 - 1))]='1;40;91'
style[$((107 - 1))]='1;40;91'
style[$((108 - 1))]='1;40;91'
style[$((109 - 1))]='1;40;91'
style[$((110 - 1))]='1;40;91'
style[$((111 - 1))]='1;40;91'
style[$((112 - 1))]='1;40;91'
style[$((113 - 1))]='1;40;91'
style[$((114 - 1))]='1;40;91'
style[$((115 - 1))]='1;40;91'
style[$((116 - 1))]='1;40;91'
style[$((117 - 1))]='1;40;91'
style[$((118 - 1))]='1;40;91'

informations() {
	# Affiche des informations sur l’éléments 'Z = $1 + 1' où '$1' est l’argument
	# On se place dans le répertoire de ce script afin de pouvoir ouvrir les fichiers dans 'qtpe.data'
	oldwd="$(pwd)"
	#cd "$(dirname "$(realpath "$0")")";
	cd -P -- "$(dirname -- "$0")"
	# Boucle 'case' sur chaque élément
	case "$1" in
		0) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${nonmetaux}mH Hydrogène\033[0m :

\033[1mPropriétés\033[0m
    Masse atomique             1.008 u
    Configuration électronique 1s¹
    Électrons par couches      1
    État aux CSPT              gaz
    Fusion                     14 K = −259 °C
    Ébullition                 20.3 K = −253 °C
    Point triple               13.8 K à 7 kPa
    Point critique             33 K à 1,3 MPa
    Densité (CSPT)             0,09 kg/m³
    Conductivité thermique     0,18 W/(m·K)
    Résistivité électrique     —
    Module de Young            —

\033[1mIsotopes\033[0m
    2 isotopes stables
    2 isotopes naturels
    | Isotope | Abondance/% |    Demi-vie | Désintégration |    Produits    | Énergie/MeV |
    |:-------:|------------:|------------:|:--------------:|:--------------:|:-----------:|
    |    ¹H   |     99,9885 |           ∞ |        —       |        —       |      —      |
    |    ²H   |      0,0115 |           ∞ |        —       |        —       |      —      |
    |    ³H   |      traces |     12,32 a |       β−       | ³He + e− + aνe |    0,019    |
    |    ⁴H   |           — | 1,4·10⁻²² s |        n       |     ³H + n     |      —      |
    |    ⁵H   |           — |   9·10⁻²² s |       2n       |    ³H + 2·n    |      —      |
    |    ⁶H   |           — |   3·10⁻²² s |       3n       |    ³H + 3·n    |      —      |
    |         |             |             |       4n       |    ²H + 4·n    |      —      |
    |    ⁷H   |           — |   2·10⁻²³ s |       4n       |    ³H + 4·n    |      —      |

\033[1mÉtymologie et histoire\033[0m

\033[1mUtilisations\033[0m

\033[1mDivers\033[0m

EOF
			;;
		1) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${nobles}mHe Hélium\033[0m :

\033[1mPropriétés\033[0m
    Masse atomique             4,003 u
    Configuration électronique 1s²
    Électrons par couches      2
    État aux CSPT              gaz
    Fusion                     0,95 K = −272 °C
    Ébullition                 4,2 K = −269 °C
    Point triple               2,2 K à 5 kPa
    Point critique             5,2 K à 0,23 MPa
    Densité (CSPT)             0,18 kg/m³
    Conductivité thermique     0,15 W/(m·K)
    Résistivité électrique     — Ω·m
    Module de Young            — GPa

\033[1mIsotopes\033[0m
    2 isotopes stables
    2 isotopes naturels
    | Isotope | Abondance/% | Demi-vie | Désintégration | Produits | Énergie/MeV |
    |:-------:|------------:|---------:|:--------------:|:--------:|:-----------:|
    |   ³He   |      0,0002 |        ∞ |        —       |     —    |      —      |
    |   ⁴He   |     99,9998 |        ∞ |        —       |     —    |      —      |

\033[1mUtilisations\033[0m
    - gas sustentateur pour ballons sondes, dirigeables, ballons,…
    - liquide cryogénique pour les supraconducteurs
    - liquide cryogénique pour diverses expériences de physique

\033[1mÉtymologie et histoire\033[0m

\033[1mDivers\033[0m
    - Seul élément pouvant être liquide à 0 K
    - Seul élément possédant un état de super-fluidité ::
        - En dessous du point λ à 2,17 K, l’Hélium-4 devient superfluide :
            - viscosité nulle,
            - conductivité thermique plusieurs centaines de fois supérieure à celle du Cuivre,
            - la chaleur se propage comme une onde à 20 m/s à 1,8 K,
            - il mouille sur n’importe quelle surface avec une épaisseur de 30 nm, il ne peut être contenu dans un récipient contenant un trou,
            - il se comporte grosso-modo comme un condensat de Bose–Einstein (l’atome ⁴He est un boson).
        - En dessous de 2,5 mK, l’Hélium-3 se décompose en deux phases dont l’une superfluide, mais différente de celle de ⁴He car les ³He sont des fermions, les atomes ³He se mettent en paire de Cooper (boson) à l’instar de la supraconductivité.

EOF
			;;
		2) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${alcalins}mLi Lithium\033[0m :

\033[1mPropriétés\033[0m
    Masse atomique             6,94 u
    Configuration électronique [He] 2s¹
    Électrons par couches      2 1
    État aux CSPT              solide
    Fusion                     181 °C
    Ébullition                 1330 °C
    Point triple               —
    Point critique             3220 K à 67 MPa
    Densité (CSPT)             0,534 kg/L
    Conductivité thermique     84,8 W/(m·K)
    Résistivité électrique     92,8 nΩ·m
    Module de Young            4,9 GPa

\033[1mIsotopes\033[0m
    2 isotopes stables
    2 isotopes naturels
    | Isotope | Abondance/% | Demi-vie | Désintégration | Produits | Énergie/MeV |
    |:-------:|------------:|---------:|:--------------:|:--------:|------------:|
    |   ⁶Li   |           5 |        ∞ |        —       |     —    |           — |
    |   ⁷Li   |          95 |        ∞ |        —       |     —    |           — |

\033[1mUtilisations\033[0m
    - Batteries
    - Céramiques et verres (abaissement du point de fusion et de la viscosité)
    - Graisses

\033[1mÉtymologie et histoire\033[0m

\033[1mDivers\033[0m
    - Métal le moins dense, presque deux fois moins dense que l’eau

EOF
			#echo "${BASH_SOURCE[0]}"
			#pwd
			#open ./qtpe.data/3_Lithium_Utilisation_enwikipediaorglithium.png
			;;
		3) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${terreux}mBe Béryllium\033[0m :

\033[1mPropriétés\033[0m
    Masse atomique             9,012 u
    Configuration électronique [He] 2s²
    Électrons par couches      2 2
    État aux CSPT              solide
    Fusion                     1290 °C
    Ébullition                 2470 °C
    Point triple               —
    Point critique             —
    Densité (CSPT)             1,85 kg/L
    Conductivité thermique     200 W/(m·K)
    Résistivité électrique     36 Ω·m
    Module de Young            287 GPa

\033[1mIsotopes\033[0m
    1 isotopes stables (Be est l’un des 26 éléments mono-isotopique, cad possédant un seul isotope stable)
    1 isotopes naturels (Be est l’un des 22 éléments mono-nucléidique, cad un seul de ses isotopes est présent dans la nature)
    | Isotope | Abondance/% |  Demi-vie | Désintégration |    Produits    | Énergie/MeV |
    |:-------:|------------:|----------:|:--------------:|:--------------:|------------:|
    |   ⁷Be   |      traces |      53 j |        ε       |    ⁷Li + νe    |       0,862 |
    |   ⁸Be   |        syn. | 7·10⁻¹⁷ s |     2α / FS    |      2·⁴He     |       0,046 |
    |   ⁹Be   |         100 |         ∞ |        —       |        —       |           — |
    |   ¹⁰Be  |      traces |   1,39 Ma |       β−       | ¹⁰B + e− + aνe |       0,556 |

\033[1mUtilisations\033[0m
    - Multiplicateur de neutrons, bombardé par des alphas, des gammas où des neutrons, le Béryllium produit des neutrons :
        α + ⁹Be  −−>  ¹²C + n
        n + ⁹Be  −−>  2·⁴He + 2·n − 1,57 MeV
        γ + ⁹Be  −−>  2·⁴He + n − 2 MeV
    - Fenêtre à rayonnement : grâce à son petit Z, le Béryllium est très transparent aux X, γ et particules énergétiques, il est donc utilisée :
        - des fenêtres à rayons X,
        - tube autour des zones de collisions dans les collisioneurs (Alice, Atlas, CMS et LHCb au LHC ; Tevatron ; …),
        - …
    - En alliage à 2 % avec le Cuivre, celui-ci est six fois plus résistant que ce dernier.
    - Matériau solide et peu dense pour l’aéronautique, les missiles, les satellites,…
    - Cadres de vélo (particulièrement rare !)
    - Applications où il faut un matériau élastique, bon conducteur de l’électricité et de la chaleur, résistant, dur, non-magnétique, résistant à la corrosion et résistant à la fatique.
    - Freins pour avions militaires (car Be : dur, haut point de fusion, très bonne dissipation de la chaleur), usage arrêté car beaucoup trop polluant.
    - Miroirs : le miroir du James Webb Space Telescope (25 m² contre 4,5 m² pour Hubble) est fait en Béryllium plaqué Or.
    - Matériau non-magnétique pour IRM, radars, klystrons, magnétrons,…
    - Réflecteur à neutrons pour les réacteurs à fission nucléaire.
    - Source de neutrons pour les expériences scientifique, du Béryllium est soumis à un flux de particules α produite pex par du Polonium-210, du Radium-226, du Plutonium-238 ou de l’Américium-241.
    - Paroi interne de Tokamaks (pex JET et ITER).
    - Haut-parleurs hautes fréquences (tweeter) de très haut de gamme car il est peu dense et très rigide, mais très difficile à mettre en œuvre (cassant et très toxique)
    - L’oxyde de Béryllium est un isolant électrique et très bon conducteur de la chaleur : meilleur que tous les non-métaux excépté le diamant, et meilleur que la plupart des métaux : 330 W/(m·K).

\033[1mÉtymologie et histoire\033[0m

\033[1mDivers\033[0m
    - Le Béryllium est monoisotopique et mononucléidique
    - Le Béryllium est le seul élément monoisotopique avec Z pair et N=A−Z impair, les 25 autres ont un Z impair et un N pair.

EOF
		#open ./qtpe.data/4_Beryllium_1992AmericanBe1.jpg ./qtpe.data/4_Beryllium_1992AmericanBe2.jpg ./qtpe.data/4_Beryllium_1993AmericanBer.jpg
			;;
		4) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${metalloides}mB Bore\033[0m :

\033[1mPropriétés\033[0m
    Masse atomique             10,8 u
    Configuration électronique [He] 2s² 2p¹
    Électrons par couches      2 3
    État aux CSPT              solide
    Fusion                     2080 °C
    Ébullition                 3930 °C
    Point triple               —
    Point critique             —
    Densité (CSPT)             2,08 kg/L
    Conductivité thermique     27,4 W/(m·K)
    Résistivité électrique     ~1 MΩ·m
    Module de Young            —

\033[1mIsotopes\033[0m
    2 isotopes stables
    2 isotopes naturels
    | Isotope | Abondance/% | Demi-vie | Désintégration | Produits | Énergie/MeV |
    |:-------:|------------:|---------:|:--------------:|:--------:|------------:|
    |   ¹⁰B   |          20 |        ∞ |        —       |     —    |           — |
    |   ¹¹B   |          80 |        ∞ |        —       |     —    |           — |

\033[1mUtilisations\033[0m
	- Fibre de Bore (pouvant être produite par condensation de vapeur sur un filament de Tungstène) pour l’aéronautique, les clubs de golf, les cannes à pêche,… (Module élastique 450 GPa, déformation de rupture 3,7 %, contrainte de rupture 17 GPa)
	- Verre borosillicate, composé d’environ 12…15 % de B₂O₃, 80 % de SiO₂ et 2 % de Al₂O₃, possède un coefficient de dilatation très bas, il ne casse donc pas lorsqu’il est soumis à une flamme, il est surtout connu sous ses noms commerciaux Pyrex et Duran.
	- Carbure de Bore B₄C sous forme de céramique pour les blindages par exemples. Le B₄C est également est bon absorbeur de neutrons (surtout grâce au ¹⁰B), il est donc utilisé en tant que tel dans certain réacteurs à fissions.
	- Matériaux à hautes duretés et abrasif sous forme de composé avec du Carbone et de l’Azote.
	- Plaquages borés pour augmenter la dureté de surface de métaux.
	- Semiconducteurs.
	- Aimants permanent : les aimants Nd₂Fe₁₄B sont les plus forts aimants permanents découverts à ce jour.
	- Contrôle neutronique dans les REP en faisant varier la concentration d’acide borique dans l’eau, celle-ci est par exemple augmentée après l’insertion de crayons de combustible neufs.

\033[1mÉtymologie et histoire\033[0m
	Bore vient de borax : Na₂[B₄O₅(OH)₄]·8(H₂O), le principal minerai dont il est extrait.
	Sous forme de borax, il est utilisé depuis au moins 300 après J.C. en Chine.
	Découvert en 1808 par Humphry Davy, puis Joseph-Louis Gay-Lussac et Louis-Jacques Thénard.
	Obtention de Bore réellement pure en 1909 par Ezekiel Weintraub, un chimiste américain.

\033[1mDivers\033[0m

EOF
			;;
		5) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${nonmetaux}mC Carbone\033[0m :

\033[1mPropriétés\033[0m
    Masse atomique             12,01 u
    Configuration électronique [He] 2s² 2p²
    Électrons par couches      2 4
    État aux CSPT              solide
    Fusion                     —
    Ébullition                 —
    Sublimation                3640 °C
    Point triple               4600 K à 10,8 MPa
    Point critique             —
    Densité (CSPT)             
        amorphe                1,8…2,1 kg/L
        graphite               2,27 kg/L
        diamand                3,5 kg/L
    Conductivité thermique
        graphite               119…165 W/(m·K)
        diamand                900…2300 W/(m·K)
    Résistivité électrique
        graphite               7,8 μΩ·m
    Module de Young
        diamand                1050 GPa

\033[1mIsotopes\033[0m
    2 isotopes stables
    2 isotopes naturels
    | Isotope |       Abondance/% | Demi-vie | Désintégration |    Produits    | Énergie/MeV |
    |:-------:|------------------:|---------:|:--------------:|:--------------:|------------:|
    |   ¹²C   |              98,9 |        ∞ |        —       |        —       |           — |
    |   ¹³C   |               1,1 |        ∞ |        —       |        —       |           — |
    |   ¹⁴C   | ~ 0,000 000 000 1 |   5730 a |       β−       | ¹⁴N + e− + aνe |       0,156 |

\033[1mÉtymologie et histoire\033[0m
	Le mot Carbone vient du latin carbo (charbon), d’où vient également charbon.

	Utilisation sous forme de suie et de charbon de bois dans les premières civilisations humaines
	Le diamand était connu par les chinois 2500 ans avant JC
	Du charbon de bois était fabriqué par les romains avec la même technique qu’aujourd’hui (combustion de bois en atmosphère confinée)
	1722 : René Antoine Ferchault de Réaumur montre que le Fer se transforme en acier par l’absorption d’une substance appelée « carbone »
	1772 : Antoine Lavoisier montre que le diamand est constitué de Carbone
	…
	>1985 : De nouveaux allotropes du Carbone sont découvert : nanotubes, fullerènes, glass-like carbon, buckminsterfullerène,…

\033[1mUtilisations\033[0m
	- C’est l’atome à la base de toutes les molécules liées à toutes les formes de vie connue, cf « Chauvinisme du Carbone » et « Biochimies hypothétiques »
	- C’est l’atome à la base des hydrocarbures et des plastiques
	- Mines de crayon en graphite
	- Balais en graphite pour les moteurs électriques
	- Modérateurs de neutrons en graphite pour les réacteurs à fission nucléaire
	- Fibre de carbone comme matériaux peu dense et très solide (aéronautique, course automobile,…)
	- Diamands industriels pour la coupe, le polissage,…
	- Cellules à enclumes de diamand pour atteindre les pressions artificielles les plus grandes jamais atteintes (2 Mbar)
	- Réduction chimique à haute température du minerai de fer avec du coke

\033[1mDivers\033[0m
    Les allotropes ont des propriétés aux extrêmes des matériaux connus :
    | Propriété                   | Extrémité basse                         | Extrémité haute                                                        |
    |:----------------------------|:----------------------------------------|:-----------------------------------------------------------------------|
    | Tribologie                  | Graphite : très bon lubrifiant          | Diamond : le meilleur des abrasifs                                     |
	| Conduction de l’électricité | Graphite : conducteur                   | Diamand : excellent conducteur,                                        |
	|                             |                                         | avec la plus grande tension de claquage connue (rigidité diélectrique) |
	|                             |                                         | 2000 kV/mm contre 3 kV/mm pour l’air                                   |
	| Conduction de la chaleur    | Graphite : isolant ou conducteur        | Diamand : meilleur conducteur connu,                                   |
	|                             |                                         | jusqu’à 2300 W/(m·K) contre 400 W/(m·K) pour le Cuivre                 |
	| Transparence                | Graphite : opaque                       | Diamand : hautement transparent                                        |
	| Cristalisation              | Graphite : famille hexagonale           | Diamand : famille cubique                                              |
	| Isotropie                   | Carbone amorphe : complètement isotrope | Nano-tube de Carbone : l’un des matériaux connus les plus anisotrope   |

EOF
			;;
		6) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${nonmetaux}mN Azote\033[0m :

\033[1mPropriétés\033[0m
    Masse atomique             14,007 u
    Configuration électronique [He] 2s² 2p³
    Électrons par couches      2 5
    État aux CSPT              gaz
    Fusion                     −210 °C
    Ébullition                 −196 °C
    Point triple               63,2 K à 12,5 kPa
    Point critique             126 K à 3,4 MPa
    Densité (CSPT)             1,25 kg/L
    Conductivité thermique     —
    Résistivité électrique     —
    Module de Young            —

\033[1mIsotopes\033[0m
    2 isotopes stables
    2 isotopes naturels
    | Isotope | Abondance/% | Demi-vie | Désintégration | Produits | Énergie/MeV |
    |:-------:|------------:|---------:|:--------------:|:--------:|------------:|
    |   ¹³N   |        syn. |   10 min |        ε       | ¹³C + νe |        2,22 |
    |   ¹⁴N   |        99,6 |        ∞ |        —       |     —    |           — |
    |   ¹⁵N   |         0,4 |        ∞ |        —       |     —    |           — |

\033[1mÉtymologie et histoire\033[0m

\033[1mUtilisations\033[0m

\033[1mDivers\033[0m

EOF
			;;
		7) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${nonmetaux}mO Oxygène\033[0m :
EOF
			;;
		8) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${halogenes}mF Fluor\033[0m :
EOF
			;;
		9) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${nobles}mNe Néon\033[0m :
EOF
			;;
		10) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${alcalins}mNa Sodium\033[0m :
EOF
			;;
		11) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${terreux}mMg Magnésium\033[0m :
EOF
			;;
		12) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${pauvres}mAl Aluminium\033[0m :
EOF
			;;
		13) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${metalloides}mSi Silicium\033[0m :
EOF
			;;
		14) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${nonmetaux}mP Phosphore\033[0m :
EOF
			;;
		15) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${nonmetaux}mS Soufre\033[0m :
EOF
			;;
		16) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${halogenes}mCl Chlore\033[0m :
EOF
			;;
		17) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${nobles}mAr Argon\033[0m :
EOF
			;;
		18) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${alcalins}mK Potassium\033[0m :
EOF
			;;
		19) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${terreux}mCa Calcium\033[0m :
EOF
			;;
		20) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${transitions}mSc Scandium\033[0m :
EOF
			;;
		21) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${transitions}mTi Titane\033[0m :
EOF
			;;
		22) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${transitions}mV Vanadium\033[0m :
EOF
			;;
		23) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${transitions}mCr Chrome\033[0m :
EOF
			;;
		24) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${transitions}mMn Manganèse\033[0m :
EOF
			;;
		25) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${transitions}mFe Fer\033[0m :
EOF
			;;
		26) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${transitions}mCo Cobalt\033[0m :
EOF
			;;
		27) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${transitions}mNi Nickel\033[0m :
EOF
			;;
		28) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${transitions}mCu Cuivre\033[0m :
EOF
			;;
		29) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${pauvres}mZn Zinc\033[0m :
EOF
			;;
		30) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${pauvres}mGa Gallium\033[0m :
EOF
			;;
		31) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${metalloides}mGe Germanium\033[0m :
EOF
			;;
		32) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${metalloides}mAs Arsenic\033[0m :
EOF
			;;
		33) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${nonmetaux}mSe Sélénium\033[0m :
EOF
			;;
		34) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${halogenes}mBr Brome\033[0m :
EOF
			;;
		35) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${nobles}mKr Krypton\033[0m :
EOF
			;;
		36) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${alcalins}mRb Rubidium\033[0m :
EOF
			;;
		37) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${terreux}mSr Strontium\033[0m :
EOF
			;;
		38) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${transitions}mY Yttrium\033[0m :
EOF
			;;
		39) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${transitions}mZr Zirconium\033[0m :
EOF
			;;
		40) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${transitions}mNb Niobium\033[0m :
EOF
			;;
		41) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${transitions}mMo Molybdène\033[0m :
EOF
			;;
		42) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${transitions}mTc Technétium\033[0m :
EOF
			;;
		43) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${transitions}mRu Ruthénium\033[0m :
EOF
			;;
		44) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${transitions}mRh Rhodium\033[0m :
EOF
			;;
		45) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${transitions}mPd Palladium\033[0m :
EOF
			;;
		46) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${transitions}mAg Argent\033[0m :
EOF
			;;
		47) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${pauvres}mCd Cadmium\033[0m :
EOF
			;;
		48) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${pauvres}mIn Indium\033[0m :
EOF
			;;
		49) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${pauvres}mSn Étain\033[0m :
EOF
			;;
		50) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${metalloides}mSb Antimoine\033[0m :
EOF
			;;
		51) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${metalloides}mTe Tellure\033[0m :
EOF
			;;
		52) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${halogenes}mI Iode\033[0m :
EOF
			;;
		53) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${nobles}mXe Xénon\033[0m :
EOF
			;;
		54) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${alcalins}mCs Césium\033[0m :
EOF
			;;
		55) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${terreux}mBa Baryum\033[0m :
EOF
			;;
		56) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${lanthanides}mLa Lanthane\033[0m :
EOF
			;;
		57) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${lanthanides}mCe Cérium\033[0m :
EOF
			;;
		58) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${lanthanides}mPr Praséodyme\033[0m :
EOF
			;;
		59) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${lanthanides}mNd Néodyme\033[0m :
EOF
			;;
		60) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${lanthanides}mPm Prométhium\033[0m :
EOF
			;;
		61) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${lanthanides}mSm Samarium\033[0m :
EOF
			;;
		62) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${lanthanides}mEu Europium\033[0m :
EOF
			;;
		63) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${lanthanides}mGd Gadolinium\033[0m :
EOF
			;;
		64) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${lanthanides}mTb Terbium\033[0m :
EOF
			;;
		65) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${lanthanides}mDy Dysprosium\033[0m :
EOF
			;;
		66) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${lanthanides}mHo Holmium\033[0m :
EOF
			;;
		67) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${lanthanides}mEr Erbium\033[0m :
EOF
			;;
		68) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${lanthanides}mTm Thulium\033[0m :
EOF
			;;
		69) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${lanthanides}mYb Ytterbium\033[0m :
EOF
			;;
		70) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${lanthanides}mLu Lutécium\033[0m :
EOF
			;;
		71) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${transitions}mHf Hafnium\033[0m :
EOF
			;;
		72) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${transitions}mTa Tantale\033[0m :
EOF
			;;
		73) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${transitions}mW Tungstène\033[0m :
EOF
			;;
		74) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${transitions}mRe Rhénium\033[0m :
EOF
			;;
		75) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${transitions}mOs Osmium\033[0m :
EOF
			;;
		76) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${transitions}mIr Iridium\033[0m :
EOF
			;;
		77) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${transitions}mPt Platine\033[0m :
EOF
			;;
		78) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${transitions}mAu Or\033[0m :
EOF
			;;
		79) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${pauvres}mHg Mercure\033[0m :
EOF
			;;
		80) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${pauvres}mTl Thallium\033[0m :
EOF
			;;
		81) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${pauvres}mPb Plomb\033[0m :
EOF
			;;
		82) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${pauvres}mBi Bismuth\033[0m :
EOF
			;;
		83) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${pauvres}mPo Polonium\033[0m :
EOF
			;;
		84) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${metalloides}mAt Astate\033[0m :
EOF
			;;
		85) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${nobles}mRn Radon\033[0m :
EOF
			;;
		86) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${alcalins}mFr Francium\033[0m :
EOF
			;;
		87) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${terreux}mRa Radium\033[0m :
EOF
			;;
		88) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${actinides}mAc Actinium\033[0m :
EOF
			;;
		89) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${actinides}mTh Thorium\033[0m :
EOF
			;;
		90) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${actinides}mPa Protactinium\033[0m :
EOF
			;;
		91) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${actinides}mU Uranium\033[0m :
EOF
			;;
		92) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${actinides}mNp Neptunium\033[0m :
EOF
			;;
		93) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${actinides}mPu Plutonium\033[0m :
EOF
			;;
		94) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${actinides}mAm Américium\033[0m :
EOF
			;;
		95) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${actinides}mCm Curium\033[0m :
EOF
			;;
		96) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${actinides}mBk Berkélium\033[0m :
EOF
			;;
		97) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${actinides}mCf Californium\033[0m :
EOF
			;;
		98) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${actinides}mEs Einsteinium\033[0m :
EOF
			;;
		99) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${actinides}mFm Fermium\033[0m :
EOF
			;;
		100) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${actinides}mMd Mendélévium\033[0m :
EOF
			;;
		101) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${actinides}mNo Nobélium\033[0m :
EOF
			;;
		102) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${actinides}mLr Lawrencium\033[0m :
EOF
			;;
		103) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${inconnues}mRf Rutherfordium\033[0m :
EOF
			;;
		104) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${inconnues}mDb Dubnium\033[0m :
EOF
			;;
		105) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${inconnues}mSg Seaborgium\033[0m :
EOF
			;;
		106) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${inconnues}mBh Bohrium\033[0m :
EOF
			;;
		107) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${inconnues}mHs Hassium\033[0m :
EOF
			;;
		108) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${inconnues}mMt Meitnerium\033[0m :
EOF
			;;
		109) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${inconnues}mDs Darmstadtium\033[0m :
EOF
			;;
		110) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${inconnues}mRg Roentgenium\033[0m :
EOF
			;;
		111) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${inconnues}mCn Copernicium\033[0m :
EOF
			;;
		112) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${inconnues}mNh Nihonium\033[0m :
EOF
			;;
		113) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${inconnues}mFl Flérovium\033[0m :
EOF
			;;
		114) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${inconnues}mMc Moscovium\033[0m :
EOF
			;;
		115) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${inconnues}mLv Livermorium\033[0m :
EOF
			;;
		116) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${inconnues}mTs Tennesse\033[0m :
EOF
			;;
		117) read -r -d '' INFORMATIONS <<EOF
Informations sur l’élément \033[${inconnues}mOg Oganesson\033[0m :
EOF
			;;
		*) echo -e "\033[31m/!\\ \033[0minformations: l’argument doit être un entier dans [[0, 117]]"
			;;
	esac
	# On se replace dans le précédent répertoire
	cd "$oldwd"
	# Affichage
	echo -e "$INFORMATIONS"
	# Il faut taper 'entrée' pour continuer
	#read -r -p 'Tapez sur « entrée » pour continuer...'
	# Provisoire : taper 'entrée' pour continuer seulement si la fiche d’informations de l’élément a été rédigée
	#     https://stackoverflow.com/questions/3685970/check-if-a-bash-array-contains-a-value
	ficheInfoRedigee=(H He Li Be B C N)
	if [[ " ${ficheInfoRedigee[@]} " =~ " ${Xx[$1]} " ]] ; then
		read -r -p 'Tapez sur « entrée » pour continuer...'
	fi
}
#for ((i=0 ; i<118 ; i++)) ; do
#    informations $i
#done
#exit 0

afficheZ() {
	# Fonction affichant Z (le numéro atomique) si son argument est non-vide (il est alors égal à Z−1)
	if [[ ${Xx_partiel[$1]} != '' ]] ; then
		echo -n "%3d $(($1 + 1))"
	else
		vide='   '
		echo -n "%3s $vide"
	fi
}

afficheTPEpartiel() {
	# Affiche le tableau périodique des élements avec uniquement les éléments auxquels on a répondu exactement
	# =============================================================================
	tpe_partiel=''
	ligne_top=''
	ligne_Xx=''
	ligne_Z=''
	# -----------------------------------------------------------------------------
	# Ligne 1
	# 1 H
	i=0
	ligne_top="${ligne_top}\033[${defaut}m+-----"
	ligne_Xx="${ligne_Xx}|\033[${nonmetaux}m  $(printf '%2s' ${Xx_partiel[$i]}) \033[${defaut}m"
	ligne_Z="${ligne_Z}|\033[${nonmetaux}m $(printf $(afficheZ $i)) \033[${defaut}m"
	ligne_top="${ligne_top}+"
	ligne_Xx="${ligne_Xx}|"
	ligne_Z="${ligne_Z}|"
	# Néant
	ligne_top="${ligne_top}$(printf %$((6*30-1))s)"
	ligne_Xx="${ligne_Xx}$(printf %$((6*30-1))s)"
	ligne_Z="${ligne_Z}$(printf %$((6*30-1))s)"
	# 2 He
	i=1
	ligne_top="${ligne_top}\033[${defaut}m+-----"
	ligne_Xx="${ligne_Xx}|\033[${nobles}m  $(printf '%2s' ${Xx_partiel[$i]}) \033[${defaut}m"
	ligne_Z="${ligne_Z}|\033[${nobles}m $(printf $(afficheZ $i)) \033[${defaut}m"
	ligne_top="${ligne_top}+\n"
	ligne_Xx="${ligne_Xx}|\n"
	ligne_Z="${ligne_Z}|\n"
	# Ligne 1
	tpe_partiel="${tpe_partiel}${ligne_top}${ligne_Xx}${ligne_Z}"
	ligne_top=''
	ligne_Xx=''
	ligne_Z=''
	# -----------------------------------------------------------------------------
	# Ligne 2
	# 3 Li - 4 Be
	couleurs=($alcalins $terreux)
	for ((i=2; i<=3; i++)); do
		ligne_top="${ligne_top}\033[${defaut}m+-----"
		ligne_Xx="${ligne_Xx}|\033[${couleurs[$((i-2))]}m  $(printf '%2s' ${Xx_partiel[$i]}) \033[${defaut}m"
		ligne_Z="${ligne_Z}|\033[${couleurs[$((i-2))]}m $(printf $(afficheZ $i)) \033[${defaut}m"
	done
	ligne_top="${ligne_top}+"
	ligne_Xx="${ligne_Xx}|"
	ligne_Z="${ligne_Z}|"
	# Néant
	ligne_top="${ligne_top}$(printf %$((6*24-1))s)"
	ligne_Xx="${ligne_Xx}$(printf %$((6*24-1))s)"
	ligne_Z="${ligne_Z}$(printf %$((6*24-1))s)"
	# 5 B - 10 Ne
	couleurs=($metalloides $nonmetaux $nonmetaux $nonmetaux $halogenes $nobles)
	for ((i=4; i<=9; i++)); do
		ligne_top="${ligne_top}\033[${defaut}m+-----"
		ligne_Xx="${ligne_Xx}|\033[${couleurs[$((i-4))]}m  $(printf '%2s' ${Xx_partiel[$i]}) \033[${defaut}m"
		ligne_Z="${ligne_Z}|\033[${couleurs[$((i-4))]}m $(printf $(afficheZ $i)) \033[${defaut}m"
	done
	ligne_top="${ligne_top}+\n"
	ligne_Xx="${ligne_Xx}|\n"
	ligne_Z="${ligne_Z}|\n"
	# Ligne 2
	tpe_partiel="${tpe_partiel}${ligne_top}${ligne_Xx}${ligne_Z}"
	ligne_top=''
	ligne_Xx=''
	ligne_Z=''
	# -----------------------------------------------------------------------------
	# Ligne 3
	# 11 Na - 12 Mg
	couleurs=($alcalins $terreux)
	for ((i=10; i<=11; i++)); do
		ligne_top="${ligne_top}\033[${defaut}m+-----"
		ligne_Xx="${ligne_Xx}|\033[${couleurs[$((i-10))]}m  $(printf '%2s' ${Xx_partiel[$i]}) \033[${defaut}m"
		ligne_Z="${ligne_Z}|\033[${couleurs[$((i-10))]}m $(printf $(afficheZ $i)) \033[${defaut}m"
	done
	ligne_top="${ligne_top}+"
	ligne_Xx="${ligne_Xx}|"
	ligne_Z="${ligne_Z}|"
	# Néant
	ligne_top="${ligne_top}$(printf %$((6*24-1))s)"
	ligne_Xx="${ligne_Xx}$(printf %$((6*24-1))s)"
	ligne_Z="${ligne_Z}$(printf %$((6*24-1))s)"
	# 13 Al - 18 Ar
	couleurs=($pauvres $metalloides $nonmetaux $nonmetaux $halogenes $nobles)
	for ((i=12; i<=17; i++)); do
		ligne_top="${ligne_top}\033[${defaut}m+-----"
		ligne_Xx="${ligne_Xx}|\033[${couleurs[$((i-12))]}m  $(printf '%2s' ${Xx_partiel[$i]}) \033[${defaut}m"
		ligne_Z="${ligne_Z}|\033[${couleurs[$((i-12))]}m $(printf $(afficheZ $i)) \033[${defaut}m"
	done
	ligne_top="${ligne_top}+\n"
	ligne_Xx="${ligne_Xx}|\n"
	ligne_Z="${ligne_Z}|\n"
	# Ligne 3
	tpe_partiel="${tpe_partiel}${ligne_top}${ligne_Xx}${ligne_Z}"
	ligne_top=''
	ligne_Xx=''
	ligne_Z=''
	# -----------------------------------------------------------------------------
	# Ligne 4
	# 19 K - 20 Ca
	couleurs=($alcalins $terreux)
	for ((i=18; i<=19; i++)); do
		ligne_top="${ligne_top}\033[${defaut}m+-----"
		ligne_Xx="${ligne_Xx}|\033[${couleurs[$((i-18))]}m  $(printf '%2s' ${Xx_partiel[$i]}) \033[${defaut}m"
		ligne_Z="${ligne_Z}|\033[${couleurs[$((i-18))]}m $(printf $(afficheZ $i)) \033[${defaut}m"
	done
	ligne_top="${ligne_top}+"
	ligne_Xx="${ligne_Xx}|"
	ligne_Z="${ligne_Z}|"
	# Néant
	ligne_top="${ligne_top}$(printf %$((6*14-1))s)"
	ligne_Xx="${ligne_Xx}$(printf %$((6*14-1))s)"
	ligne_Z="${ligne_Z}$(printf %$((6*14-1))s)"
	# 21 Sc - 36 Kr
	couleurs=($transitions $transitions $transitions $transitions $transitions $transitions $transitions $transitions $transitions $pauvres $pauvres $metalloides $metalloides $nonmetaux $halogenes $nobles)
	for ((i=20; i<=35; i++)); do
		ligne_top="${ligne_top}\033[${defaut}m+-----"
		ligne_Xx="${ligne_Xx}|\033[${couleurs[$((i-20))]}m  $(printf '%2s' ${Xx_partiel[$i]}) \033[${defaut}m"
		ligne_Z="${ligne_Z}|\033[${couleurs[$((i-20))]}m $(printf $(afficheZ $i)) \033[${defaut}m"
	done
	ligne_top="${ligne_top}+\n"
	ligne_Xx="${ligne_Xx}|\n"
	ligne_Z="${ligne_Z}|\n"
	# Ligne 4
	tpe_partiel="${tpe_partiel}${ligne_top}${ligne_Xx}${ligne_Z}"
	ligne_top=''
	ligne_Xx=''
	ligne_Z=''
	# -----------------------------------------------------------------------------
	# Ligne 5
	# 37 Rb - 38 Sr
	couleurs=($alcalins $terreux)
	for ((i=36; i<=37; i++)); do
		ligne_top="${ligne_top}\033[${defaut}m+-----"
		ligne_Xx="${ligne_Xx}|\033[${couleurs[$((i-36))]}m  $(printf '%2s' ${Xx_partiel[$i]}) \033[${defaut}m"
		ligne_Z="${ligne_Z}|\033[${couleurs[$((i-36))]}m $(printf $(afficheZ $i)) \033[${defaut}m"
	done
	ligne_top="${ligne_top}+"
	ligne_Xx="${ligne_Xx}|"
	ligne_Z="${ligne_Z}|"
	# Néant
	ligne_top="${ligne_top}$(printf %$((6*14-1))s)"
	ligne_Xx="${ligne_Xx}$(printf %$((6*14-1))s)"
	ligne_Z="${ligne_Z}$(printf %$((6*14-1))s)"
	# 39 Y - 54 Xe
	couleurs=($transitions $transitions $transitions $transitions $transitions $transitions $transitions $transitions $transitions $pauvres $pauvres $pauvres $metalloides $metalloides $halogenes $nobles)
	for ((i=38; i<=53; i++)); do
		ligne_top="${ligne_top}\033[${defaut}m+-----"
		ligne_Xx="${ligne_Xx}|\033[${couleurs[$((i-38))]}m  $(printf '%2s' ${Xx_partiel[$i]}) \033[${defaut}m"
		ligne_Z="${ligne_Z}|\033[${couleurs[$((i-38))]}m $(printf $(afficheZ $i)) \033[${defaut}m"
	done
	ligne_top="${ligne_top}+\n"
	ligne_Xx="${ligne_Xx}|\n"
	ligne_Z="${ligne_Z}|\n"
	# Ligne 5
	tpe_partiel="${tpe_partiel}${ligne_top}${ligne_Xx}${ligne_Z}"
	ligne_top=''
	ligne_Xx=''
	ligne_Z=''
	# -----------------------------------------------------------------------------
	# Ligne 6
	# 55 Cs - 86 Rn
	couleurs=($alcalins $terreux $lanthanides $lanthanides $lanthanides $lanthanides $lanthanides $lanthanides $lanthanides $lanthanides $lanthanides $lanthanides $lanthanides $lanthanides $lanthanides $lanthanides $lanthanides $transitions $transitions $transitions $transitions $transitions $transitions $transitions $transitions $pauvres $pauvres $pauvres $pauvres $pauvres $metalloides $nobles)
	for ((i=54; i<=85; i++)); do
		ligne_top="${ligne_top}\033[${defaut}m+-----"
		ligne_Xx="${ligne_Xx}|\033[${couleurs[$((i-54))]}m  $(printf '%2s' ${Xx_partiel[$i]}) \033[${defaut}m"
		ligne_Z="${ligne_Z}|\033[${couleurs[$((i-54))]}m $(printf $(afficheZ $i)) \033[${defaut}m"
	done
	ligne_top="${ligne_top}+\n"
	ligne_Xx="${ligne_Xx}|\n"
	ligne_Z="${ligne_Z}|\n"
	# Ligne 6
	tpe_partiel="${tpe_partiel}${ligne_top}${ligne_Xx}${ligne_Z}"
	ligne_top=''
	ligne_Xx=''
	ligne_Z=''
	# -----------------------------------------------------------------------------
	# Ligne 7
	# 87 Fr - 118 Og
	couleurs=($alcalins $terreux $actinides $actinides $actinides $actinides $actinides $actinides $actinides $actinides $actinides $actinides $actinides $actinides $actinides $actinides $actinides $inconnues $inconnues $inconnues $inconnues $inconnues $inconnues $inconnues $inconnues $inconnues $inconnues $inconnues $inconnues $inconnues $inconnues $inconnues)
	for ((i=86; i<=117; i++)); do
		ligne_top="${ligne_top}\033[${defaut}m+-----"
		ligne_Xx="${ligne_Xx}|\033[${couleurs[$((i-86))]}m  $(printf '%2s' ${Xx_partiel[$i]}) \033[${defaut}m"
		ligne_Z="${ligne_Z}|\033[${couleurs[$((i-86))]}m $(printf $(afficheZ $i)) \033[${defaut}m"
	done
	ligne_top="${ligne_top}+\n"
	ligne_Xx="${ligne_Xx}|\n"
	ligne_Z="${ligne_Z}|\n"
	# Ligne 7
	tpe_partiel="${tpe_partiel}${ligne_top}${ligne_Xx}${ligne_Z}"
	# Bas du tableau
	tpe_partiel="${tpe_partiel}+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n"
	# =============================================================================
	echo -e "$tpe_partiel\033[0m"
}

afficheTPEpartiel_CouleursExterne() {
	# Affiche le tableau périodique des élements avec uniquement les éléments auxquels on a répondu exactement
	# Contrairement à 'afficheTPEpartiel', cette fonction prend les couleurs définies dans le tableau 'couleurs', qui est global, cad défini hors de cette fonction
	#echo ${couleurs[@]}
	# =============================================================================
	tpe_partiel=''
	ligne_top=''
	ligne_Xx=''
	ligne_Z=''
	# -----------------------------------------------------------------------------
	# Ligne 1
	# 1 H
	i=0
	ligne_top="${ligne_top}\033[${defaut}m+-----"
	ligne_Xx="${ligne_Xx}|\033[${style_partiel[$i]}m  $(printf '%2s' ${Xx_partiel[$i]}) \033[${defaut}m"
	ligne_Z="${ligne_Z}|\033[${style_partiel[$i]}m $(printf $(afficheZ $i)) \033[${defaut}m"
	ligne_top="${ligne_top}+"
	ligne_Xx="${ligne_Xx}|"
	ligne_Z="${ligne_Z}|"
	# Néant
	ligne_top="${ligne_top}$(printf %$((6*30-1))s)"
	ligne_Xx="${ligne_Xx}$(printf %$((6*30-1))s)"
	ligne_Z="${ligne_Z}$(printf %$((6*30-1))s)"
	# 2 He
	i=1
	ligne_top="${ligne_top}\033[${defaut}m+-----"
	ligne_Xx="${ligne_Xx}|\033[${style_partiel[$i]}m  $(printf '%2s' ${Xx_partiel[$i]}) \033[${defaut}m"
	ligne_Z="${ligne_Z}|\033[${style_partiel[$i]}m $(printf $(afficheZ $i)) \033[${defaut}m"
	ligne_top="${ligne_top}+\n"
	ligne_Xx="${ligne_Xx}|\n"
	ligne_Z="${ligne_Z}|\n"
	# Ligne 1
	tpe_partiel="${tpe_partiel}${ligne_top}${ligne_Xx}${ligne_Z}"
	ligne_top=''
	ligne_Xx=''
	ligne_Z=''
	# -----------------------------------------------------------------------------
	# Ligne 2
	# 3 Li - 4 Be
	for ((i=2; i<=3; i++)); do
		ligne_top="${ligne_top}\033[${defaut}m+-----"
		ligne_Xx="${ligne_Xx}|\033[${style_partiel[$i]}m  $(printf '%2s' ${Xx_partiel[$i]}) \033[${defaut}m"
		ligne_Z="${ligne_Z}|\033[${style_partiel[$i]}m $(printf $(afficheZ $i)) \033[${defaut}m"
	done
	ligne_top="${ligne_top}+"
	ligne_Xx="${ligne_Xx}|"
	ligne_Z="${ligne_Z}|"
	# Néant
	ligne_top="${ligne_top}$(printf %$((6*24-1))s)"
	ligne_Xx="${ligne_Xx}$(printf %$((6*24-1))s)"
	ligne_Z="${ligne_Z}$(printf %$((6*24-1))s)"
	# 5 B - 10 Ne
	for ((i=4; i<=9; i++)); do
		ligne_top="${ligne_top}\033[${defaut}m+-----"
		ligne_Xx="${ligne_Xx}|\033[${style_partiel[$i]}m  $(printf '%2s' ${Xx_partiel[$i]}) \033[${defaut}m"
		ligne_Z="${ligne_Z}|\033[${style_partiel[$i]}m $(printf $(afficheZ $i)) \033[${defaut}m"
	done
	ligne_top="${ligne_top}+\n"
	ligne_Xx="${ligne_Xx}|\n"
	ligne_Z="${ligne_Z}|\n"
	# Ligne 2
	tpe_partiel="${tpe_partiel}${ligne_top}${ligne_Xx}${ligne_Z}"
	ligne_top=''
	ligne_Xx=''
	ligne_Z=''
	# -----------------------------------------------------------------------------
	# Ligne 3
	# 11 Na - 12 Mg
	for ((i=10; i<=11; i++)); do
		ligne_top="${ligne_top}\033[${defaut}m+-----"
		ligne_Xx="${ligne_Xx}|\033[${style_partiel[$i]}m  $(printf '%2s' ${Xx_partiel[$i]}) \033[${defaut}m"
		ligne_Z="${ligne_Z}|\033[${style_partiel[$i]}m $(printf $(afficheZ $i)) \033[${defaut}m"
	done
	ligne_top="${ligne_top}+"
	ligne_Xx="${ligne_Xx}|"
	ligne_Z="${ligne_Z}|"
	# Néant
	ligne_top="${ligne_top}$(printf %$((6*24-1))s)"
	ligne_Xx="${ligne_Xx}$(printf %$((6*24-1))s)"
	ligne_Z="${ligne_Z}$(printf %$((6*24-1))s)"
	# 13 Al - 18 Ar
	for ((i=12; i<=17; i++)); do
		ligne_top="${ligne_top}\033[${defaut}m+-----"
		ligne_Xx="${ligne_Xx}|\033[${style_partiel[$i]}m  $(printf '%2s' ${Xx_partiel[$i]}) \033[${defaut}m"
		ligne_Z="${ligne_Z}|\033[${style_partiel[$i]}m $(printf $(afficheZ $i)) \033[${defaut}m"
	done
	ligne_top="${ligne_top}+\n"
	ligne_Xx="${ligne_Xx}|\n"
	ligne_Z="${ligne_Z}|\n"
	# Ligne 3
	tpe_partiel="${tpe_partiel}${ligne_top}${ligne_Xx}${ligne_Z}"
	ligne_top=''
	ligne_Xx=''
	ligne_Z=''
	# -----------------------------------------------------------------------------
	# Ligne 4
	# 19 K - 20 Ca
	for ((i=18; i<=19; i++)); do
		ligne_top="${ligne_top}\033[${defaut}m+-----"
		ligne_Xx="${ligne_Xx}|\033[${style_partiel[$i]}m  $(printf '%2s' ${Xx_partiel[$i]}) \033[${defaut}m"
		ligne_Z="${ligne_Z}|\033[${style_partiel[$i]}m $(printf $(afficheZ $i)) \033[${defaut}m"
	done
	ligne_top="${ligne_top}+"
	ligne_Xx="${ligne_Xx}|"
	ligne_Z="${ligne_Z}|"
	# Néant
	ligne_top="${ligne_top}$(printf %$((6*14-1))s)"
	ligne_Xx="${ligne_Xx}$(printf %$((6*14-1))s)"
	ligne_Z="${ligne_Z}$(printf %$((6*14-1))s)"
	# 21 Sc - 36 Kr
	for ((i=20; i<=35; i++)); do
		ligne_top="${ligne_top}\033[${defaut}m+-----"
		ligne_Xx="${ligne_Xx}|\033[${style_partiel[$i]}m  $(printf '%2s' ${Xx_partiel[$i]}) \033[${defaut}m"
		ligne_Z="${ligne_Z}|\033[${style_partiel[$i]}m $(printf $(afficheZ $i)) \033[${defaut}m"
	done
	ligne_top="${ligne_top}+\n"
	ligne_Xx="${ligne_Xx}|\n"
	ligne_Z="${ligne_Z}|\n"
	# Ligne 4
	tpe_partiel="${tpe_partiel}${ligne_top}${ligne_Xx}${ligne_Z}"
	ligne_top=''
	ligne_Xx=''
	ligne_Z=''
	# -----------------------------------------------------------------------------
	# Ligne 5
	# 37 Rb - 38 Sr
	for ((i=36; i<=37; i++)); do
		ligne_top="${ligne_top}\033[${defaut}m+-----"
		ligne_Xx="${ligne_Xx}|\033[${style_partiel[$i]}m  $(printf '%2s' ${Xx_partiel[$i]}) \033[${defaut}m"
		ligne_Z="${ligne_Z}|\033[${style_partiel[$i]}m $(printf $(afficheZ $i)) \033[${defaut}m"
	done
	ligne_top="${ligne_top}+"
	ligne_Xx="${ligne_Xx}|"
	ligne_Z="${ligne_Z}|"
	# Néant
	ligne_top="${ligne_top}$(printf %$((6*14-1))s)"
	ligne_Xx="${ligne_Xx}$(printf %$((6*14-1))s)"
	ligne_Z="${ligne_Z}$(printf %$((6*14-1))s)"
	# 39 Y - 54 Xe
	for ((i=38; i<=53; i++)); do
		ligne_top="${ligne_top}\033[${defaut}m+-----"
		ligne_Xx="${ligne_Xx}|\033[${style_partiel[$i]}m  $(printf '%2s' ${Xx_partiel[$i]}) \033[${defaut}m"
		ligne_Z="${ligne_Z}|\033[${style_partiel[$i]}m $(printf $(afficheZ $i)) \033[${defaut}m"
	done
	ligne_top="${ligne_top}+\n"
	ligne_Xx="${ligne_Xx}|\n"
	ligne_Z="${ligne_Z}|\n"
	# Ligne 5
	tpe_partiel="${tpe_partiel}${ligne_top}${ligne_Xx}${ligne_Z}"
	ligne_top=''
	ligne_Xx=''
	ligne_Z=''
	# -----------------------------------------------------------------------------
	# Ligne 6
	# 55 Cs - 86 Rn
	for ((i=54; i<=85; i++)); do
		ligne_top="${ligne_top}\033[${defaut}m+-----"
		ligne_Xx="${ligne_Xx}|\033[${style_partiel[$i]}m  $(printf '%2s' ${Xx_partiel[$i]}) \033[${defaut}m"
		ligne_Z="${ligne_Z}|\033[${style_partiel[$i]}m $(printf $(afficheZ $i)) \033[${defaut}m"
	done
	ligne_top="${ligne_top}+\n"
	ligne_Xx="${ligne_Xx}|\n"
	ligne_Z="${ligne_Z}|\n"
	# Ligne 6
	tpe_partiel="${tpe_partiel}${ligne_top}${ligne_Xx}${ligne_Z}"
	ligne_top=''
	ligne_Xx=''
	ligne_Z=''
	# -----------------------------------------------------------------------------
	# Ligne 7
	# 87 Fr - 118 Og
	for ((i=86; i<=117; i++)); do
		ligne_top="${ligne_top}\033[${defaut}m+-----"
		ligne_Xx="${ligne_Xx}|\033[${style_partiel[$i]}m  $(printf '%2s' ${Xx_partiel[$i]}) \033[${defaut}m"
		ligne_Z="${ligne_Z}|\033[${style_partiel[$i]}m $(printf $(afficheZ $i)) \033[${defaut}m"
	done
	ligne_top="${ligne_top}+\n"
	ligne_Xx="${ligne_Xx}|\n"
	ligne_Z="${ligne_Z}|\n"
	# Ligne 7
	tpe_partiel="${tpe_partiel}${ligne_top}${ligne_Xx}${ligne_Z}"
	# Bas du tableau
	tpe_partiel="${tpe_partiel}+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n"
	# =============================================================================
	echo -e "$tpe_partiel\033[0m"
}
## Test
#for ((i=0 ; i<118 ; i++)) ; do
#    Xx_partiel[$i]=${Xx[$i]}
#done
#afficheTPEpartiel_CouleursExterne
#exit 1

# Affichage du tableau périodique des éléments dans le terminal sans lancer le quiz
if [[ $option_p == true ]] ; then
	# Affichage du tableau
	for ((i=0 ; i<118 ; i++)) ; do
		Xx_partiel[$i]=${Xx[$i]}
	done
	afficheTPEpartiel
	#Xx_partiel=('' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '')
	exit 0
fi

# Sauvegarde du tableau périodique des éléments dans un fichier
if [[ $sauvegarde_tpe == true ]] ; then
	# Affichage du tableau
	for ((i=0 ; i<118 ; i++)) ; do
		Xx_partiel[$i]=${Xx[$i]}
	done
	afficheTPEpartiel
	#Xx_partiel=('' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '')
	# Écriture dans un fichier
	afficheTPE > "$fichier_tpe"
	echo -e "Tableau périodique des éléments sauvegardé dans le fichier\n\t\033[33m$fichier_tpe\033[0m"
	exit 0
fi

## Test de la coloration du tableau
#for ((i=0 ; i<118 ; i++)) ; do
#    Xx_partiel[$i]=${Xx[$i]}
#done
#afficheTPEpartiel
#exit 0

distanceLevenshtein() {
	# Calcule la distance de Levenshtein entre les deux chaines passées en argument.
	# Le code a été développé en Python dans
	#     ./DistancesMathematiquesChainesCaracteres.py
	# puis dans en Bash dans
	#     ./DistanceLevenshtein.sh
	# Tailles
	L1=${#1}
	L2=${#2}
	# Cas où l’une des deux chaînes (ou les deux) est vide
	if ((L1 == 0)) ; then
		echo $L2
	fi
	if ((L2 == 0)) ; then
		echo $L1
	fi
	# Matrice des manipulations
	d=()
	# Taille de la matrice des manipulations
	((N1 = L1 + 1))
	((N2 = L2 + 1))
	# Entier minimum parmis ceux passés en argument
	min() {
		#echo $(( $1 > $2 ? $2 : $1 ))
		min=999999
		for v in $* ; do
			min=$(( min < v ? min : v ))
		done
		echo $min
	}
	#
	uni() {
		# Calcul de l’indice 'm' de l’élément d’une matrice 1d correspondant à l’indice '(i,j)' de son pendant 2d
		# Le but de cette fonction est d’avoir un code source proche de la version Python, mais avec une matrice des manipulation 1d puisque Bash ne gère que les tableaux de dimension 1
		# La convention choisie est la concaténation des lignes, donc :
		# mat2d : matrice 2d à M lignes et N colonnes
		# mat1d : matrice 1d de taille M×N
		# mat1d[i·N+j] = mat2d[i,j]
		echo $(($1 * N2 + $2))
	}
	# Première ligne de la matrice des manipulations
	for ((i2=0 ; i2<N2 ; i2++)) ; do
		k=$(uni 0 $i2)
		d[$k]=$i2
	done
	# Première colonne de la matrice des manipulations
	for ((i1=0 ; i1<N1 ; i1++)) ; do
		k=$(uni $i1 0)
		d[$k]=$i1
	done
	# Calcul des éléments de la matrice des manipulations
	for ((i2=0 ; i2<N2-1 ; i2++)) ; do
		for ((i1=0 ; i1<N1-1 ; i1++)) ; do
			if [[ ${1:i1:1} == ${2:i2:1} ]] ; then
				substitutionCost=0
			else
				substitutionCost=1
			fi
			suppression=$((${d[$(uni $i1 $((i2+1)))]} + 1))
			insertion=$((${d[$(uni $((i1+1)) $i2)]} + 1))
			substitution=$((${d[$(uni $i1 $i2)]} + $substitutionCost))
			d[$(uni $((i1+1)) $((i2+1)))]=$(min $suppression $insertion $substitution)
		done
	done
	# Affichage de la matrice des manipulations
	#for ((i1=0 ; i1<N1 ; i1++)) ; do
	#    echo
	#    for ((i2=0 ; i2<N2 ; i2++)) ; do
	#        echo -n " ${d[$(uni $i1 $i2)]}"
	#    done
	#done
	#echo
	# Affichage de la distance de Levenshein
	#echo
	#echo "Distance de Levenshein entre $1 et $2 : ${d[$(uni $((N1-1)) $((N2-1)))]}"
	echo ${d[$(uni $((N1-1)) $((N2-1)))]}
	# Fin
	exit 0
}

# Précision pour la commande 'bc'
scale=7

min() {
	# Renvoie le plus petit de ses deux arguments
	echo $(( $1 > $2 ? $2 : $1 ))
}

note() {
	# Calcule une note à partir de la distance 'd' entre la réponse donnée et la solution
	# La note doit être une fonction 'f' strictement décroissante de 'd' avec :
	# f(d=0) = 1,
	# f(d=L_s) = 0,
	# avec 'L_s' la longueur de la solution.
	# On a choisi ici la fonction la plus simple possible, soit une fonction affine :
	# f(d) = 1 - min(d,L_s) / L_s.
	#
	# Argument de cette fonction 'note' :
	# $1 : distance (de Levenshein)
	# $2 : longueur de la chaine de la réponse
	echo $(echo "scale=$scale; 1. - $(min $1 $2) / $2" | bc)
}

lowerascii() {
	# Converti une chaine de caractère en ASCII et muniscule
	#
	# Conversion en ASCII
	out=$(echo "$1" | iconv -f utf-8 -t ascii//translit)
	# Suppression des '`" que iconv a ajouté avant les caractères qui comportaient un accent aigu ('), un accent grave (`) ou un trëma (")
	out=$(sed "s/['\`^]//g" <<< "${out}")
	out=$(sed 's/["]//g' <<< "${out}")
	# Passage en minuscule
	out=$(tr '[:upper:]' '[:lower:]' <<< "$out")
	# 
	echo "${out}"
}

contientElement() {
	# Renvoie 'vrai' (cad $? vaut 0) si '$1' est contenu dans le tableau '$2'
	#
	#     https://stackoverflow.com/questions/3685970/check-if-a-bash-array-contains-a-value
	local e match="$1"
	shift
	for e ; do [[ "$e" == "$match" ]] && return 0 ; done
	return 1
	#
	# Le code précédent ne fonctionne pas, et en plus, je ne le comprend pas !
	# En fait si, il faut juste mettre le tableau entre "..." :
	#     contientElement Xx "${Xx[@]}"
}
#for element in "${Xx[@]}" ; do
#    echo -en "$element monoisotopique ? "
#    if $(contientElement $element "${Xx_unistables[@]}") ; then echo 'Oui' ; else echo 'Non' ; fi
#done

# =============================================================================
# Quiz(s)
echo 'Réponse de la forme <Symbole Nom>, pex: Ch Cochonium, Ub Unobtainium, Ad Adamantium, Ip Impossiblium,...'
case "$quiz" in
	tous)
	# -------------------------------------------------------------------------------
	# Quiz sur les 118 éléments du tableau périodique
	#
	# Compteur du nombre de fois ou chaque élément a été joué (plus d’une fois si on a donné sa langue au chat)
	compteur_tentatives=(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
	# Tableau des éléments où l’on a répondu exactement
	reussites=(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
	# Tableau de chaines vides progressivement remplie par les symboles des éléments où l’on a répondu correctement
	Xx_partiel=('' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '')
	Z_partiel=('' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '')
	# Tableau des points sur les symboles
	moyennes_symboles=(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
	# Tableau des points sur les noms
	moyennes_noms=(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
	# Compteur du nombre de fois où on a donné sa langue au chat
	compteur_LaC=(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)

	# Début
	deb=$(date +%s)
	date_iso=$(date '+%Y-%m-%d@%H:%M:%S')
	date_ctn=$(date '+%Y%m%d_%H%M%S')

	# Compteur du nombre d’éléments où l’on a répondu correctement (symbole et nom)
	compteur_global_reussites=0

	# Quizz
	while :; do
		# Tirage au sort de l’élément
		# $RANDOM renvoie un nombre aléatoire appartenant à [[0, 32767]]
		while :; do
			#((x = $RANDOM / 32767 * 118))  # ne fonctionne pas car '/' est la division euclidienne
			((x = $RANDOM * 118 / 32767))
			if ((${reussites[$x]} == 0)); then
				break
			fi
		done
		# Affichage du tableau avec uniquement affichés les éléments auxquels on a répondu
		if [[ $option_l == false ]] ; then
			clear
			afficheTPEpartiel
		fi
		# -----------------------------------------------------------------------------
		# Boucle répétant la question sur l’élément tant que (i) on n’a pas donné la bonne réponse OU (ii) on n’a pas donné sa langue au chat
		while :; do
			# Booléens de réussite remis à zéro à chaque tentative
			reussite_symbole=0
			reussite_nom=0
			# Question
			#echo -ne "<Symbole Nom> de l’élément \033[1mZ = $((x+1))\033[0m ? : "
			printf "\033[1m%3d\033[0m ? : " $((x+1))
			read rep
			# Test
			#rep="${Xx[$x]} ${Fr[$x]}"
			#sleep .2
			# Arrêt du jeu
			if [[ "$rep" == 'q' ]] ; then
				echo "Arrêt du jeu"
				break
			fi
			# Incrémentation du compteur des tentatives (après la boucle de quittage du jeu lorsqu’on presse 'q')
			((compteur_tentatives[x]++))
			# Si on a donné sa langue au chat
			if [[ "$rep" == '' ]] ; then
				((compteur_LaC[x]++))
				echo -ne "\tLa réponse était \033[1;33m${Xx[$x]} ${Fr[$x]}\033[0m..."
				read
				break
			fi
			# Vérification que la réponse est bien de la forme <chaine><espace><chaine>
			espaces=$(sed 's/[^ ]//g' <<< "$rep")
			if (( ${#espaces} != 1 )) ; then
				echo -e "\t\033[1;31m/!\\ \033[0m: la réponse doit être de la forme <symbole><espace><nom>, pex 'Ch Cochonium', 'Ad Adamantium', 'Ip Impossiblium', 'Nq Nimportequium',…"
				continue
			fi
			# Séparation du symbole et du nom
			rep_symbole="${rep%% *}"
			rep_nom="${rep##* }"
			# Solution
			sol_symbole="${Xx[$x]}"
			sol_nom="${Fr[$x]}"
			# Mode approximatif : suppression des accents et des majuscules
			if [[ $mode == 'approximatif' ]] ; then
				#echo "Mode approximatif :"
				#echo "Réponse  : $rep  -->  $(lowerascii "$rep")"
				#echo "Solution : $sol_symbole $sol_nom  -->  $(lowerascii "$sol_symbole") $(lowerascii "$sol_nom")"
				# Réponse donnée
				rep_symbole=$(lowerascii "$rep_symbole")
				rep_nom=$(lowerascii "$rep_nom")
				# Solution
				sol_symbole=$(lowerascii "${Xx[$x]}")
				sol_nom=$(lowerascii "${Fr[$x]}")
			fi
			# Vérification du symbole
			if [[ "$rep_symbole" != "$sol_symbole" ]] ; then
				distance_symbole=$(distanceLevenshtein $rep_symbole $sol_symbole)
				echo -en "\t\033[1;31mNON !\033[0m Le symbole de l’élément Z=$((x+1)) n’est pas \033[7m$rep_symbole\033[0m, distance de Levenshein avec le symbole exact : $distance_symbole\n"
				note_symbole=$(note $distance_symbole ${#sol_symbole})
			else
				note_symbole=1
				reussite_symbole=1
			fi
			# Vérification du nom
			if [[ "$rep_nom" != "$sol_nom" ]] ; then
				distance_nom=$(distanceLevenshtein $rep_nom $sol_nom)
				echo -en "\t\033[1;31mNON !\033[0m Le nom de l’élément Z=$((x+1)) n’est pas \033[7m$rep_nom\033[0m, distance de Levenshein avec le nom exact : $distance_nom\n"
				note_nom=$(note $distance_nom ${#sol_nom})
			else
				note_nom=1
				reussite_nom=1
			fi
			# Calcul (mise à jour) des moyennes
			if ((compteur_tentatives[x] == 1)) ; then
				# Alors c’est la première tentative, la moyenne est égale à la note.
				# Il ne faut alors pas utiliser la formule de récurrence car alors, on fait la moyenne entre la note et zéro (la valeur initiale de la moyenne), donc la note de la première tentative serait systématiquement divisée par deux
				moyennes_symboles[$x]=$note_symbole
				moyennes_noms[$x]=$note_nom
			else
				moyennes_symboles[$x]=$(echo "scale=$scale; ((${compteur_tentatives[$x]}-1) * ${moyennes_symboles[$x]} + $note_symbole) / ${compteur_tentatives[$x]}" | bc)
				moyennes_noms[$x]=$(echo "scale=$scale; ((${compteur_tentatives[$x]}-1) * ${moyennes_noms[$x]} + $note_nom) / ${compteur_tentatives[$x]}" | bc)
			fi
			#
			# Le symbole et le nom donnés sont exact
			if (( (reussite_symbole == 1) && (reussite_nom == 1) )) ; then
				reussites[$x]=1
				((compteur_global_reussites++))
				Xx_partiel[$x]=${Xx[$x]}
				Z_partiel[$x]=$((x+1))
				echo -e "\033[1A\033[56C\033[1;32mOUI !\033[0m"
				# Avec l’option '-i', on affiche des informations sur l’élément
				if [[ $option_i == true ]] ; then informations $x ; fi
				# Ce 'break' (celui de la boucle 'while' sur l’élément en train d’être joué) est à mettre à la toute fin (de la boucle 'while' sur l’élément joué), sinon, tout ce qu’il y a après ne sera pas exécuté si l’élément est réussi
				break
			fi
		done
		# Fin des questions si (i) on y a répondu exactement à toutes OU (ii) si on a arrêté en tapant 'q'
		if ((compteur_global_reussites == 118)) || [[ "$rep" == 'q' ]] ; then
			if [[ "$rep" != 'q' ]] ; then echo 'Bravo !' ; fi
			# Les moyennes des questions où l’on a donné sa langue au chat sont mises à zéro
			for ((i=0 ; i<118 ; i++)) ; do
				if ((compteur_LaC[i] > 0)) ; then
					((moyennes_symboles[i] = 0))
					((moyennes_noms[i] = 0))
				fi
			done
			break
		fi
	done

	# Fin
	fin=$(date +%s)

	# Moyenne globale sur tous les éléments
	moyenne_globale_symboles=0
	moyenne_globale_noms=0
	compteur_global_tentatives=0
	compteur_global_LaC=0
	for ((i=0 ; i<118 ; i++)) ; do
		moyenne_globale_symboles=$(echo "scale=$scale; $moyenne_globale_symboles + ${moyennes_symboles[$i]}" | bc)
		moyenne_globale_noms=$(echo "scale=$scale; $moyenne_globale_noms + ${moyennes_noms[$i]}" | bc)
		((compteur_global_LaC += compteur_LaC[i]))
		((compteur_global_tentatives += compteur_tentatives[i]))
	done
	#echo "moyenne_globale_symboles = $moyenne_globale_symboles"
	#echo "moyenne_globale_noms = $moyenne_globale_noms"
	moyenne_globale_symboles=$(echo "scale=$scale; $moyenne_globale_symboles / 118" | bc)
	moyenne_globale_noms=$(echo "scale=$scale; $moyenne_globale_noms / 118" | bc)
	#echo "moyenne_globale_symboles = $moyenne_globale_symboles"
	#echo "moyenne_globale_noms = $moyenne_globale_noms"

	## Affichages finaux temporaires
	#echo -e "\n1 si on a donné la réponse exacte :"
	#echo "${reussites[@]}"
	#echo -e "\nMoyennes des réponses sur le symbole :"
	#echo "${moyennes_symboles[@]}"
	#echo -e "\nMoyennes des réponses sur le nom :"
	#echo "${moyennes_noms[@]}"
	#echo -e "\nNombres de tentatives :"
	#echo "${compteur_tentatives[@]}"
	#echo -e "\nCompteur de 'langue au chat' :"
	#echo "${compteur_LaC[@]}"

	## Bilan des réponses données
	#echo -e "\n\tBILAN DES RÉPONSES DONNÉES"
	#echo "Colonne 1 : Symbole de l’élément"
	#echo "Colonne 2 : 1 si on a donné la réponse exacte (pour le symbole et le nom), 0 sinon"
	#echo "Colonne 3 : Moyenne des réponses pour le symbole"
	#echo "Colonne 4 : Moyenne des réponses pour le nom"
	#echo "Colonne 5 : Nombre de tentatives"
	#echo "Colonne 6 : Compteur de 'langue au chat'"
	#echo
	#for ((i=0 ; i<118 ; i++)) ; do
	#    printf " %2s %d %.3f %.3f %d %d\n" ${Xx[$i]} ${reussites[$i]} ${moyennes_symboles[$i]/./,} ${moyennes_noms[$i]/./,} ${compteur_tentatives[$i]} ${compteur_LaC[$i]}
	#done
	#printf "      %.3f %.3f %d %d\n" ${moyenne_globale_symboles/./,} ${moyenne_globale_noms/./,} $compteur_global_tentatives $compteur_global_LaC
	#echo

	# Aquisition du pseudo pour l’historique des scores
	echo
	while : ; do
		read -r -p  "Pseudo ? [<= 50 caractères] : " pseudo
		if (( ${#pseudo} > 0 )) ; then break; fi
	done
	if (( ${#pseudo} > 50 )) ; then
		pseudo="${pseudo:0:50}"
		echo "/!\\ Le pseudo ''$pseudo'' possède ${#pseudo} caractères, les $((${#pseudo}-50)) derniers caractères seront ignorés."
	fi

	# Affichage du tableau périodique des éléments complété
	clear
	afficheTPEpartiel

	# # Création du répertoire où seront enregistrer les fichiers de score
	# repertoire_scores="${HOME}/QuizTableauPeriodiqueElements_Scores"
	# if [[ ! -d "$repertoire_scores" ]] ; then
		# mkdir -v "$repertoire_scores"
	# fi

	# Bilan des réponses données
	bilan="Bilan des réponses données au quiz '$0' à ${date_iso}\n\n"
	bilan="${bilan}Joueur : $pseudo\n\n"
	if [[ "$rep" == 'q' ]] ; then
		bilan="${bilan}/!\\ : Le quiz a été arrêté (avec 'q') avant la fin, après avoir répondu correctement à $compteur_global_reussites questions sur 118.\n\n"
	fi
	if [[ $mode == 'approximatif' ]] ; then
		bilan="${bilan}Mode approximatif : « sn etain » est accepté pour « Sn Étain »\n\n"
	fi
	bilan="${bilan}Colonne 1 : Symbole de l’élément\n"
	bilan="${bilan}Colonne 2 : 1 si on a donné la réponse exacte (pour le symbole et le nom), 0 sinon\n"
	bilan="${bilan}Colonne 3 : Moyenne des réponses pour le symbole\n"
	bilan="${bilan}Colonne 4 : Moyenne des réponses pour le nom\n"
	bilan="${bilan}Colonne 5 : Nombre de tentatives\n"
	bilan="${bilan}Colonne 6 : Compteur de 'langue au chat'\n"
	bilan="${bilan}\n"
	for ((i=0 ; i<118 ; i++)) ; do
		bilan="${bilan}$(printf " %2s %3d %.3f %.3f %3d %3d" ${Xx[$i]} ${reussites[$i]} ${moyennes_symboles[$i]} ${moyennes_noms[$i]} ${compteur_tentatives[$i]} ${compteur_LaC[$i]})\n"
	done
	bilan="${bilan}$(printf "    %3d %.3f %.3f %3d %3d" ${compteur_global_reussites} ${moyenne_globale_symboles} ${moyenne_globale_noms} $compteur_global_tentatives $compteur_global_LaC)\n"
	# Écriture du bilan dans un fichier
	fichier_scores="${repertoire_scores}/QuizTableauPeriodiqueElements_${date_ctn}.txt"
	echo -e "$bilan" > "$fichier_scores"
	# Affichage du bilan
	echo -e "Détails des scores sauvegardés dans \n\t$fichier_scores" 
	read -r -p "voulez-vous l’afficher ? [o/[n]] : " rep
	echo
	if [[ "$rep" == 'o' ]] ; then
		cat "$fichier_scores"
	fi

	# Historique des scores
	hist="${repertoire_scores}/QuizTableauPeriodiqueElements_Historique.md"
	if [[ ! -f "$hist" ]] ; then
		# Le fichier historique n’existe pas ==> création
		printf "# Hisorique des scores du quiz '$0'\n\n" > "$hist"
		#printf "| Pseudo                                             | AAAA-MM-JJ@hh:mm:ss | Nbr. elmt | Md. apprx. | Moy. symb. | Moy. nom | Nbr. tent. | Nbr. LaC | Nbr. corr. | Temps [s] |\n" >> "$hist"
		#printf "|:---------------------------------------------------|:-------------------:|----------:|-----------:|-----------:|---------:|-----------:|---------:|-----------:|----------:|\n" >> "$hist"
		printf "| Pseudo                                             | AAAA-MM-JJ@hh:mm:ss | # elmt | Md. apprx. | Md. léger | Moy. symb. | Moy. nom | # tent. | # LaC | # corr. | Temps [s] |\n" >> "$hist"
		printf "|:---------------------------------------------------|:-------------------:|-------:|-----------:|----------:|-----------:|---------:|--------:|------:|--------:|----------:|\n" >> "$hist"
	fi
	# Pour l’affichage de choix ou non des 'mode approximatif' et 'mode léger'
	echo_mode_approximatif='non' ; [[ $mode == 'approximatif' ]] && echo_mode_approximatif='oui'
	echo_mode_leger='non' ; [[ $option_l == true ]] && echo_mode_leger='oui'
	# Écriture de la ligne de score
	printf "| %-50s | ${date_iso} |    118 |        %3s |       %3s |      %.3f |    %.3f |     %3d |   %3d |     %3d | %9d |\n" "$pseudo" $echo_mode_approximatif $echo_mode_leger ${moyenne_globale_symboles} ${moyenne_globale_noms} $compteur_global_tentatives $compteur_global_LaC $compteur_global_reussites $((fin-deb)) >> "$hist"
	# Affichage
	echo -e "Historique des scores sauvegardé dans le fichier :\n\t$hist\n"
	cat "$hist"
	echo
	;;

	unistable)
	# -------------------------------------------------------------------------------
	# Quiz sur 26 éléments monoisotopiques
	#
	#echo "quiz monoisotopiques"
	#exit 0
	# Tableau des éléments où l’on a répondu exactement
	reussites=(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
	# Tableau de chaines vides progressivement remplie par les symboles des éléments où l’on a répondu correctement
	Xx_partiel=('' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '')
	# Tableau des styles, pour ne pas donner d’indices, seules les éléments où l’on a répondu correctement ont leur cellule mise en forme
	style_partiel=('' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '')
	# Compteur du nombre de fois où l’on a donné sa langue au chat
	compteur_global_LaC=0
	# Compteur du nombre d’éléments où l’on a répondu correctement (symbole et nom) sans avoir donné sa langue au chat
	compteur_global_reussites=0
	# Compteur du nombre d’éléments que l’on a donné correctement avant et après avoir donné sa langue au chat (le cas échéant)
	compteur_global_reussites_LaCoupas=0
	# Compteur du nombre de réponses (bonne ou maivaise) données
	compteur_global_tentatives=0

	# Tableau des symboles
	#out=$(tr '[:upper:]' '[:lower:]' <<< "$out")
	if [[ "$mode" == 'approximatif' ]] ; then
		for ((i=0 ; i<26 ; i++)) ; do
			Xx_unistables_comparaison[$i]=$(lowerascii ${Xx_unistables[$i]})
		done
	else
		for ((i=0 ; i<26 ; i++)) ; do
			Xx_unistables_comparaison[$i]=${Xx_unistables[$i]}
		done
	fi
	#echo -e "Éléments monoisotopiques : ${Xx_unistables_comparaison[@]}"

	# Tableau des symboles en minuscules
	# Ce tableau est utilisé pour vérifier si l’élément donné est bien celui d’un élément (à défaut d’être celui d’un élément monoisotopique), en mode approximatif, c’est long de convertir à chaque fois le tableau 'Xx' des symbole, on le fait donc ici une bonne fois pour toute
	for ((i=0 ; i<118 ; i++)) ; do
		Xx_lowerascii[$i]=$(lowerascii ${Xx[$i]})
	done

	# Début
	deb=$(date +%s)
	date_iso=$(date '+%Y-%m-%d@%H:%M:%S')
	date_ctn=$(date '+%Y%m%d_%H%M%S')

	# Quizz
	while : ; do
		# Acquisition du 'Symbole Nom' d’un élément monoisotopique
		echo -n "<Symbole> de l’un des 26 éléments monoisotopiques ? ($((26 - compteur_global_reussites)) restants) : "
		read rep
		# Arrêt du jeu
		if [[ "$rep" == 'q' ]] ; then
			echo "Arrêt du jeu"
			break
		fi
		# Si mode 'approximatif'
		rep_originale="$rep"
		if [[ $mode == 'approximatif' ]] ; then
			rep=$(lowerascii "$rep")
		fi
		# Incrémentation du compteur des tentatives (après la boucle de quittage du jeu lorsqu’on presse 'q')
		((compteur_global_tentatives++))
		# Si on a donné sa langue au chat
		if [[ "$rep" == '' ]] ; then
			((compteur_global_LaC++))
			echo -n "Vous avez trouvez les $compteur_global_reussites éléments monoisotopiques suivant :"
			for ((i=0 ; i<26 ; i++)) ; do
				if ((reussites[i] == 1)) ; then
					echo -n " ${Xx_unistables[$i]}"
				fi
			done
			if ((compteur_global_LaC > 1)) ; then
				# Alors c’est au moins la deuxième fois qu’on a donné sa langue au chat
				echo
				echo -n "Vous avez donné les $((compteur_global_reussites_LaCoupas - compteur_global_reussites)) éléments monoisotopiques suivant après avoir donné $((compteur_global_LaC - 1)) fois votre langue au chat :"
				for ((i=0 ; i<26 ; i++)) ; do
					if ((reussites[i] < 0)) ; then
						echo -n " ${Xx_unistables[$i]}"
					fi
				done
			fi
			echo 
			echo -n "Les numéros atomiques des $((26 - compteur_global_reussites_LaCoupas)) éléments monoisotopiques que vous n’avez pas trouvé/donné sont :"
			for ((i=0 ; i<26 ; i++)) ; do
				if ((reussites[i] == 0)) ; then
					echo -n " ${Z_unistables[$i]}"
				fi
			done
			echo
			echo -n "Frappez 'entrée' pour continuer..."
			read
		fi
		# Vérification que l’élément donné est bien l’un des 26 éléments monoisotopiques, et si oui, lequel est-ce ?
		rep_exacte=false
		for ((i=0 ; i<26 ; i++)) ; do
			#echo "i = $i  :  ${Xx_unistables_comparaison[$i]}"
			if [[ "$rep" == "${Xx_unistables_comparaison[$i]}" ]] ; then
				if ((reussites[i] == 1)) ; then
					echo "Vous avez déjà trouvé cet élément monoisotopique !"
				elif ((reussites[i] < 0)) ; then
					echo "Vous avez déjà donné cet élément monoisotoique (après avoir donné votre langue au chat) !"
				else
					rep_exacte=true
				fi
				# Mise à jour des éléments monoisotopiques trouvés / donnés
				Z_ElementTrouveDonne=${Z_unistables[$i]}
				i_ElementTrouveDonne=$((Z_ElementTrouveDonne - 1))
				Xx_partiel[$i_ElementTrouveDonne]=${Xx_unistables[$i]}
				style_partiel[$i_ElementTrouveDonne]=${style[$i_ElementTrouveDonne]}
				#
				break
			fi
		done
		#echo "Indice de la réponse : $i ${Xx_unistables_comparaison[$i]}"
		if [[ $rep_exacte == true ]] ; then
			# Selon qu’on ait déjà donné sa langue au chat ou pas
			if ((compteur_global_LaC > 0)) ; then
				echo "Oui"
				((reussites[i] = - compteur_global_LaC))
				((compteur_global_reussites_LaCoupas++))
			else
				echo "Bravo !"
				reussites[$i]=1
				((compteur_global_reussites++))
				((compteur_global_reussites_LaCoupas++))
			fi
		else
			# On vérifie si le symbole donnée est celui d’un élément ou pas
			bool=false
			if [[ $mode == 'approximatif' ]] ; then
				for ((i=0 ; i<118 ; i++)) ; do
					#if [[ "$rep" == $(lowerascii ${Xx[$i]}) ]] ; then
					if [[ "$rep" == ${Xx_lowerascii[$i]} ]] ; then
						bool=true
						break
					fi
				done
			else
				for ((i=0 ; i<118 ; i++)) ; do
					if [[ "$rep_originale" == ${Xx[$i]} ]] ; then
						bool=true
						break
					fi
				done
			fi
			if [[ $bool == true ]] ; then
				echo "Non ! L’élément « ${Xx[$i]} ${Fr[$i]} » n’est pas monoisotopique."
				echo -n "Frappez 'entrée' pour continuer..."
				read
			else
				echo "Non et non ! Aucun élément ne possède le symbole « $rep_originale »."
				echo -n "Frappez 'entrée' pour continuer..."
				read
			fi
		fi
		# Affichage du tableau avec uniquement affichés les éléments auxquels on a répondu
		clear
		#afficheTPEpartiel
		afficheTPEpartiel_CouleursExterne
		#echo "compteur_global_reussites = $compteur_global_reussites"
		#echo "compteur_global_reussites_LaCoupas = $compteur_global_reussites_LaCoupas"
		# Fin des questions si (i) on y a répondu exactement à toutes OU (ii) si on a arrêté en tapant 'q'
		if ((compteur_global_reussites_LaCoupas == 26)) ; then
			if ((compteur_global_reussites > 0)) ; then
				# Alors on a trouvé au moins un élément
				if ((compteur_global_reussites == 26)) ; then
					echo "Félicitations ! Vous avez trouvé les 26 éléments monoisotopiques"
				else
					echo -n "Bravo ! Vous avez trouvé les $compteur_global_reussites éléments monoisotopiques suivant :"
					for ((i=0 ; i<26 ; i++)) ; do
						if ((reussites[i] == 1)) ; then
							echo -n " ${Xx_unistables[$i]}"
						fi
					done
				fi
			else
				echo "Dommage ! Vous n’avez trouvé aucun élément monoisotopique."
			fi
			break
		fi
		if [[ "$rep" == 'q' ]] ; then
			if ((compteur_global_reussites > 0)) ; then
				echo "Dommage ! Vous aviez trouvé les $compteur_global_reussites éléments monoisotopiques suivants :"
				for ((i=0 ; i<26 ; i++)) ; do
					if ((reussites[i] == 1)) ; then
						echo -n " ${Xx_unistables[$i]}"
					fi
				done
			else
				echo "Dommage !"
			fi
			break
		fi
	done

	# Fin
	fin=$(date +%s)

	## Affichages finaux temporaires
	#echo
	#echo -e "1 si on a donné la réponse exacte : ${reussites[@]}"
	#echo -e "Nombres de tentatives : $compteur_global_tentatives"
	#echo -e "Compteur de 'langue au chat' : $compteur_global_LaC"

	## Bilan des réponses données
	#echo -e "\n\tBILAN DES RÉPONSES DONNÉES"
	#echo "Colonne 1 : Symbole de l’élément"
	#echo "Colonne 2 : 1 si on a donné la réponse exacte (pour le symbole et le nom), 0 sinon"
	#echo "Colonne 3 : Moyenne des réponses pour le symbole"
	#echo "Colonne 4 : Moyenne des réponses pour le nom"
	#echo "Colonne 5 : Nombre de tentatives"
	#echo "Colonne 6 : Compteur de 'langue au chat'"
	#echo
	#for ((i=0 ; i<118 ; i++)) ; do
	#    printf " %2s %d %.3f %.3f %d %d\n" ${Xx[$i]} ${reussites[$i]} ${moyennes_symboles[$i]/./,} ${moyennes_noms[$i]/./,} ${compteur_tentatives[$i]} ${compteur_LaC[$i]}
	#done
	#printf "      %.3f %.3f %d %d\n" ${moyenne_globale_symboles/./,} ${moyenne_globale_noms/./,} $compteur_global_tentatives $compteur_global_LaC
	#echo

	# Aquisition du pseudo pour l’historique des scores
	echo
	while : ; do
		read -r -p  "Pseudo ? [<= 50 caractères] : " pseudo
		if (( ${#pseudo} > 0 )) ; then break; fi
	done
	if (( ${#pseudo} > 50 )) ; then
		pseudo="${pseudo:0:50}"
		echo "/!\\ Le pseudo ''$pseudo'' possède ${#pseudo} caractères, les $((${#pseudo}-50)) derniers caractères seront ignorés."
	fi

	# Affichage du tableau périodique des éléments complété
	clear
	#afficheTPEpartiel
	for ((i=0 ; i<118 ; i++)) ; do
		Xx_partiel[$i]=${Xx[$i]}
		style_partiel[$i]=${style[$i]}
	done
	afficheTPEpartiel_CouleursExterne
	echo -e "Coloration du fond selon le nombre S_Z d’isotopes stables :"
	echo -e "\033[40m    \033[0m S_Z = 0, aucun isotope stable"
	# : Z = 43, 61, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118"
	echo -e "\033[100m    \033[0m S_Z = 1, un unique isotope stable (26 éléments monoisotopiques)"
	# : Z = 4, 9, 11, 13, 15, 21, 23, 25, 27, 33, 37, 39, 41, 45, 49, 53, 55, 57, 59, 63, 65, 67, 69, 71, 75, 79"
	echo -e "\033[107m    \033[0m S_Z > 1, deux ou plus isotopes stables"
	# : Z = 1, 2, 3, 5, 6, 7, 8, 10, 12, 14, 16, 17, 18, 19, 20, 22, 24, 26, 28, 29, 30, 31, 32, 34, 35, 36, 38, 40, 42, 44, 46, 47, 48, 50, 51, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 73, 74, 76, 77, 78, 80, 81, 82"
	echo -e "Coloration des caractères selon le nombre N_Z d’isotopes naturels :"
	echo -e "\033[91m Xx \033[0m N_Z = 0, aucun isotope naturellement présent ou uniquement à l’état de traces"
	echo -e "\033[33m Xx \033[0m N_Z = 1, un unique isotope naturel (22 éléments mononucléidiques)"
	echo -e "\033[92m Xx \033[0m N_Z > 1, deux ou plus isotopes naturels"
	echo

	# # Création du répertoire où seront enregistrer les fichiers de score
	# repertoire_scores="${HOME}/QuizTableauPeriodiqueElements_Scores"
	# if [[ ! -d "$repertoire_scores" ]] ; then
		# mkdir -v "$repertoire_scores"
	# fi

	# Historique des scores
	hist="${repertoire_scores}/QuizTableauPeriodiqueElements_Historique_MonoIsotopiques.md"
	if [[ ! -f "$hist" ]] ; then
		# Le fichier historique n’existe pas ==> création
		printf "# Hisorique des scores du quiz '$0 -q unistable' sur les 26 éléments mono-isotopiques\n\n" > "$hist"
		printf "| Pseudo                                             | AAAA-MM-JJ@hh:mm:ss | Md. apprx. | Nbr. tent. | Nbr. LaC | Nbr. corr. | Temps [s] |\n" >> "$hist"
		printf "|:---------------------------------------------------|:-------------------:|-----------:|-----------:|---------:|-----------:|----------:|\n" >> "$hist"
	fi
	# Écriture de la ligne de score
	if [[ $mode == 'approximatif' ]] ; then
		echo_mode_approximatif=oui
	else
		echo_mode_approximatif=non
	fi
	printf "| %-50s | ${date_iso} |        %3s |        %3d |      %3d |        %3d | %9d |\n" "$pseudo" $echo_mode_approximatif $compteur_global_tentatives $compteur_global_LaC $compteur_global_reussites $((fin-deb)) >> "$hist"
	# Affichage
	echo -e "Historique des scores sauvegardé dans le fichier :\n\t$hist\n"
	cat "$hist"
	echo
	;;

	uninaturel)
	# -------------------------------------------------------------------------------
	# Quiz sur 22 éléments mononucléidiques
	#
	# Tableau des éléments où l’on a répondu exactement
	reussites=(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
	# Tableau de chaines vides progressivement remplie par les symboles des éléments où l’on a répondu correctement
	Xx_partiel=('' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '')
	# Tableau des styles, pour ne pas donner d’indices, seules les éléments où l’on a répondu correctement ont leur cellule mise en forme
	style_partiel=('' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '' '')
	# Compteur du nombre de fois où l’on a donné sa langue au chat
	compteur_global_LaC=0
	# Compteur du nombre d’éléments où l’on a répondu correctement (symbole et nom) sans avoir donné sa langue au chat
	compteur_global_reussites=0
	# Compteur du nombre d’éléments que l’on a donné correctement avant et après avoir donné sa langue au chat (le cas échéant)
	compteur_global_reussites_LaCoupas=0
	# Compteur du nombre de réponses (bonne ou maivaise) données
	compteur_global_tentatives=0

	# Tableau des symboles
	#out=$(tr '[:upper:]' '[:lower:]' <<< "$out")
	if [[ "$mode" == 'approximatif' ]] ; then
		for ((i=0 ; i<22 ; i++)) ; do
			Xx_uninaturels_comparaison[$i]=$(lowerascii ${Xx_uninaturels[$i]})
		done
	else
		for ((i=0 ; i<22 ; i++)) ; do
			Xx_uninaturels_comparaison[$i]=${Xx_uninaturels[$i]}
		done
	fi
	#echo -e "Éléments mononucléidiques : ${Xx_uninaturels_comparaison[@]}"

	# Tableau des symboles en minuscules
	# Ce tableau est utilisé pour vérifier si l’élément donné est bien celui d’un élément (à défaut d’être celui d’un élément mononucléidique), en mode approximatif, c’est long de convertir à chaque fois le tableau 'Xx' des symbole, on le fait donc ici une bonne fois pour toute
	for ((i=0 ; i<118 ; i++)) ; do
		Xx_lowerascii[$i]=$(lowerascii ${Xx[$i]})
	done

	# Début
	deb=$(date +%s)
	date_iso=$(date '+%Y-%m-%d@%H:%M:%S')
	date_ctn=$(date '+%Y%m%d_%H%M%S')

	# Quizz
	while : ; do
		# Acquisition du 'Symbole Nom' d’un élément mononucléidique
		echo -n "<Symbole> de l’un des 22 éléments mononucléidiques ? ($((22 - compteur_global_reussites)) restants) : "
		read rep
		# Arrêt du jeu
		if [[ "$rep" == 'q' ]] ; then
			echo "Arrêt du jeu"
			break
		fi
		# Si mode 'approximatif'
		rep_originale="$rep"
		if [[ $mode == 'approximatif' ]] ; then
			rep=$(lowerascii "$rep")
		fi
		# Incrémentation du compteur des tentatives (après la boucle de quittage du jeu lorsqu’on presse 'q')
		((compteur_global_tentatives++))
		# Si on a donné sa langue au chat
		if [[ "$rep" == '' ]] ; then
			((compteur_global_LaC++))
			echo -n "Vous avez trouvez les $compteur_global_reussites éléments mononucléidiques suivant :"
			for ((i=0 ; i<22 ; i++)) ; do
				if ((reussites[i] == 1)) ; then
					echo -n " ${Xx_uninaturels[$i]}"
				fi
			done
			if ((compteur_global_LaC > 1)) ; then
				# Alors c’est au moins la deuxième fois qu’on a donné sa langue au chat
				echo
				echo -n "Vous avez donné les $((compteur_global_reussites_LaCoupas - compteur_global_reussites)) éléments mononucléidiques suivant après avoir donné $((compteur_global_LaC - 1)) fois votre langue au chat :"
				for ((i=0 ; i<22 ; i++)) ; do
					if ((reussites[i] < 0)) ; then
						echo -n " ${Xx_uninaturels[$i]}"
					fi
				done
			fi
			echo 
			echo -n "Les numéros atomiques des $((22 - compteur_global_reussites_LaCoupas)) éléments mononucléidiques que vous n’avez pas trouvé/donné sont :"
			for ((i=0 ; i<22 ; i++)) ; do
				if ((reussites[i] == 0)) ; then
					echo -n " ${Z_uninaturels[$i]}"
				fi
			done
			echo
			echo -n "Frappez 'entrée' pour continuer..."
			read
		fi
		# Vérification que l’élément donné est bien l’un des 22 éléments mononucléidiques, et si oui, lequel est-ce ?
		rep_exacte=false
		for ((i=0 ; i<22 ; i++)) ; do
			#echo "i = $i  :  ${Xx_uninaturels_comparaison[$i]}"
			if [[ "$rep" == "${Xx_uninaturels_comparaison[$i]}" ]] ; then
				if ((reussites[i] == 1)) ; then
					echo "Vous avez déjà trouvé cet élément mononucléidique !"
				elif ((reussites[i] < 0)) ; then
					echo "Vous avez déjà donné cet élément mononucléidique (après avoir donné votre langue au chat) !"
				else
					rep_exacte=true
				fi
				# Mise à jour des éléments mononucléidiques trouvés / donnés
				Z_ElementTrouveDonne=${Z_uninaturels[$i]}
				i_ElementTrouveDonne=$((Z_ElementTrouveDonne - 1))
				Xx_partiel[$i_ElementTrouveDonne]=${Xx_uninaturels[$i]}
				style_partiel[$i_ElementTrouveDonne]=${style[$i_ElementTrouveDonne]}
				#
				break
			fi
		done
		#echo "Indice de la réponse : $i ${Xx_uninaturels_comparaison[$i]}"
		if [[ $rep_exacte == true ]] ; then
			# Selon qu’on ait déjà donné sa langue au chat ou pas
			if ((compteur_global_LaC > 0)) ; then
				echo "Oui"
				((reussites[i] = - compteur_global_LaC))
				((compteur_global_reussites_LaCoupas++))
			else
				echo "Bravo !"
				reussites[$i]=1
				((compteur_global_reussites++))
				((compteur_global_reussites_LaCoupas++))
			fi
		else
			# On vérifie si le symbole donnée est celui d’un élément ou pas
			bool=false
			if [[ $mode == 'approximatif' ]] ; then
				for ((i=0 ; i<118 ; i++)) ; do
					#if [[ "$rep" == $(lowerascii ${Xx[$i]}) ]] ; then
					if [[ "$rep" == ${Xx_lowerascii[$i]} ]] ; then
						bool=true
						break
					fi
				done
			else
				for ((i=0 ; i<118 ; i++)) ; do
					if [[ "$rep_originale" == ${Xx[$i]} ]] ; then
						bool=true
						break
					fi
				done
			fi
			if [[ $bool == true ]] ; then
				echo "Non ! L’élément « ${Xx[$i]} ${Fr[$i]} » n’est pas mononucléidique."
				echo -n "Frappez 'entrée' pour continuer..."
				read
			else
				echo "Non et non ! Aucun élément ne possède le symbole « $rep_originale »."
				echo -n "Frappez 'entrée' pour continuer..."
				read
			fi
		fi
		# Affichage du tableau avec uniquement affichés les éléments auxquels on a répondu
		clear
		#afficheTPEpartiel
		afficheTPEpartiel_CouleursExterne
		#echo "compteur_global_reussites = $compteur_global_reussites"
		#echo "compteur_global_reussites_LaCoupas = $compteur_global_reussites_LaCoupas"
		# Fin des questions si (i) on y a répondu exactement à toutes OU (ii) si on a arrêté en tapant 'q'
		if ((compteur_global_reussites_LaCoupas == 22)) ; then
			if ((compteur_global_reussites > 0)) ; then
				# Alors on a trouvé au moins un élément
				if ((compteur_global_reussites == 22)) ; then
					echo "Félicitations ! Vous avez trouvé les 22 éléments mononucléidiques"
				else
					echo -n "Bravo ! Vous avez trouvé les $compteur_global_reussites éléments mononucléidiques suivant :"
					for ((i=0 ; i<22 ; i++)) ; do
						if ((reussites[i] == 1)) ; then
							echo -n " ${Xx_uninaturels[$i]}"
						fi
					done
				fi
			else
				echo "Dommage ! Vous n’avez trouvé aucun élément mononucléidique."
			fi
			break
		fi
		if [[ "$rep" == 'q' ]] ; then
			if ((compteur_global_reussites > 0)) ; then
				echo "Dommage ! Vous aviez trouvé les $compteur_global_reussites éléments mononucléidiques suivants :"
				for ((i=0 ; i<22 ; i++)) ; do
					if ((reussites[i] == 1)) ; then
						echo -n " ${Xx_uninaturels[$i]}"
					fi
				done
			else
				echo "Dommage !"
			fi
			break
		fi
	done

	# Fin
	fin=$(date +%s)

	## Affichages finaux temporaires
	#echo
	#echo -e "1 si on a donné la réponse exacte : ${reussites[@]}"
	#echo -e "Nombres de tentatives : $compteur_global_tentatives"
	#echo -e "Compteur de 'langue au chat' : $compteur_global_LaC"

	## Bilan des réponses données
	#echo -e "\n\tBILAN DES RÉPONSES DONNÉES"
	#echo "Colonne 1 : Symbole de l’élément"
	#echo "Colonne 2 : 1 si on a donné la réponse exacte (pour le symbole et le nom), 0 sinon"
	#echo "Colonne 3 : Moyenne des réponses pour le symbole"
	#echo "Colonne 4 : Moyenne des réponses pour le nom"
	#echo "Colonne 5 : Nombre de tentatives"
	#echo "Colonne 6 : Compteur de 'langue au chat'"
	#echo
	#for ((i=0 ; i<118 ; i++)) ; do
	#    printf " %2s %d %.3f %.3f %d %d\n" ${Xx[$i]} ${reussites[$i]} ${moyennes_symboles[$i]/./,} ${moyennes_noms[$i]/./,} ${compteur_tentatives[$i]} ${compteur_LaC[$i]}
	#done
	#printf "      %.3f %.3f %d %d\n" ${moyenne_globale_symboles/./,} ${moyenne_globale_noms/./,} $compteur_global_tentatives $compteur_global_LaC
	#echo

	# Aquisition du pseudo pour l’historique des scores
	echo
	while : ; do
		read -r -p  "Pseudo ? [<= 50 caractères] : " pseudo
		if (( ${#pseudo} > 0 )) ; then break; fi
	done
	if (( ${#pseudo} > 50 )) ; then
		pseudo="${pseudo:0:50}"
		echo "/!\\ Le pseudo ''$pseudo'' possède ${#pseudo} caractères, les $((${#pseudo}-50)) derniers caractères seront ignorés."
	fi

	# Affichage du tableau périodique des éléments complété
	clear
	#afficheTPEpartiel
	for ((i=0 ; i<118 ; i++)) ; do
		Xx_partiel[$i]=${Xx[$i]}
		style_partiel[$i]=${style[$i]}
	done
	afficheTPEpartiel_CouleursExterne
	echo -e "Coloration du fond selon le nombre S_Z d’isotopes stables :"
	echo -e "\033[40m    \033[0m S_Z = 0, aucun isotope stable"
	# : Z = 43, 61, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118"
	echo -e "\033[100m    \033[0m S_Z = 1, un unique isotope stable (26 éléments monoisotopiques)"
	# : Z = 4, 9, 11, 13, 15, 21, 23, 25, 27, 33, 37, 39, 41, 45, 49, 53, 55, 57, 59, 63, 65, 67, 69, 71, 75, 79"
	echo -e "\033[107m    \033[0m S_Z > 1, deux ou plus isotopes stables"
	# : Z = 1, 2, 3, 5, 6, 7, 8, 10, 12, 14, 16, 17, 18, 19, 20, 22, 24, 26, 28, 29, 30, 31, 32, 34, 35, 36, 38, 40, 42, 44, 46, 47, 48, 50, 51, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 73, 74, 76, 77, 78, 80, 81, 82"
	echo -e "Coloration des caractères selon le nombre N_Z d’isotopes naturels :"
	echo -e "\033[91m Xx \033[0m N_Z = 0, aucun isotope naturellement présent ou uniquement à l’état de traces"
	echo -e "\033[33m Xx \033[0m N_Z = 1, un unique isotope naturel (22 éléments mononucléidiques)"
	echo -e "\033[92m Xx \033[0m N_Z > 1, deux ou plus isotopes naturels"
	echo

	# # Création du répertoire où seront enregistrer les fichiers de score
	# #repertoire_scores="${HOME}/QuizTableauPeriodiqueElements_Scores"
	# repertoire_scores="~/Scores/qtpe"
	# if [[ ! -d "$repertoire_scores" ]] ; then
		# mkdir -v "$repertoire_scores"
	# fi

	# Historique des scores
	hist="${repertoire_scores}/QuizTableauPeriodiqueElements_Historique_MonoNucleidiques.md"
	if [[ ! -f "$hist" ]] ; then
		# Le fichier historique n’existe pas ==> création
		printf "# Hisorique des scores du quiz '$0 -q uninaturel' sur les 22 éléments mono-isotopiques\n\n" > "$hist"
		printf "| Pseudo                                             | AAAA-MM-JJ@hh:mm:ss | Md. apprx. | Nbr. tent. | Nbr. LaC | Nbr. corr. | Temps [s] |\n" >> "$hist"
		printf "|:---------------------------------------------------|:-------------------:|-----------:|-----------:|---------:|-----------:|----------:|\n" >> "$hist"
	fi
	# Écriture de la ligne de score
	if [[ $mode == 'approximatif' ]] ; then
		echo_mode_approximatif=oui
	else
		echo_mode_approximatif=non
	fi
	printf "| %-50s | ${date_iso} |        %3s |        %3d |      %3d |        %3d | %9d |\n" "$pseudo" $echo_mode_approximatif $compteur_global_tentatives $compteur_global_LaC $compteur_global_reussites $((fin-deb)) >> "$hist"
	# Affichage
	echo -e "Historique des scores sauvegardé dans le fichier :\n\t$hist\n"
	cat "$hist"
	echo
	;;
esac

# Fin
# ATTENTION : Si on exécute ce script dans le shell parant via :
#     $ . ./QuizTableauPeriodiqueElements.sh
# alors le 'exit 0' cloturera le shell parent (puisque c’est celui dans lequel a été exécuté ce script).
echo -e "\033[0m"
#exit 0
